
Buck_VoltageMode_HW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080073cc  080073cc  000083cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073fc  080073fc  00009020  2**0
                  CONTENTS
  4 .ARM          00000000  080073fc  080073fc  00009020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073fc  080073fc  00009020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073fc  080073fc  000083fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007400  08007400  00008400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08007404  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000020  08007424  00009020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08007424  00009500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d99  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024eb  00000000  00000000  0001cde9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0001f2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e72  00000000  00000000  00020598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc19  00000000  00000000  0002140a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e36  00000000  00000000  0004d023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001301b5  00000000  00000000  00060e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019100e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000522c  00000000  00000000  00191054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00196280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080073b4 	.word	0x080073b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	080073b4 	.word	0x080073b4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <WaveFormTrigger>:
/* @brief Waits for a trigger to start recording
* @details
* This waits until we detect a trigger then starts recording the user values.
*/
void WaveFormTrigger(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  switch (Waveform.m_State)
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <WaveFormTrigger+0x54>)
 80009fa:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d005      	beq.n	8000a0e <WaveFormTrigger+0x1a>
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	dc1a      	bgt.n	8000a3c <WaveFormTrigger+0x48>
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00a      	beq.n	8000a20 <WaveFormTrigger+0x2c>
 8000a0a:	2b01      	cmp	r3, #1
      Waveform.m_IndexPlay = 0;
    }
    break;

  case WAVEFORM_PLAY:
    break;
 8000a0c:	e016      	b.n	8000a3c <WaveFormTrigger+0x48>
    Waveform.m_State = WAVEFORM_RECORD;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <WaveFormTrigger+0x54>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
    Waveform.m_IndexRec = 0;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <WaveFormTrigger+0x54>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
    break;
 8000a1e:	e00d      	b.n	8000a3c <WaveFormTrigger+0x48>
    if (Waveform.m_IndexRec > 80)
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <WaveFormTrigger+0x54>)
 8000a22:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8000a26:	2b50      	cmp	r3, #80	@ 0x50
 8000a28:	d907      	bls.n	8000a3a <WaveFormTrigger+0x46>
      Waveform.m_State = WAVEFORM_PLAY;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <WaveFormTrigger+0x54>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
      Waveform.m_IndexPlay = 0;
 8000a32:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <WaveFormTrigger+0x54>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
    break;
 8000a3a:	bf00      	nop
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000094 	.word	0x20000094

08000a4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
  
  /* JOYSTICK UP enables load transients load */
  if (GPIO_Pin == JOYSTICK_UP_Pin)
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a5c:	d103      	bne.n	8000a66 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    Demo.bTransient = 1;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  }    
  
  /* JOYSTICK DOWN disables load transients load */
  if (GPIO_Pin == JOYSTICK_DOWN_Pin)
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	2b20      	cmp	r3, #32
 8000a6a:	d103      	bne.n	8000a74 <HAL_GPIO_EXTI_Callback+0x28>
  {
    Demo.bTransient = 0;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
  }      
    
  /* JOYSTICK RIGHT increases the activated Resistors load */
  if (GPIO_Pin == JOYSTICK_RIGHT_Pin)
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d10e      	bne.n	8000a98 <HAL_GPIO_EXTI_Callback+0x4c>
  {
    /* Clamp the value to Max if over-pressed by user */
    if (Demo.NbrActiveLoad < 2)
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a7c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d809      	bhi.n	8000a98 <HAL_GPIO_EXTI_Callback+0x4c>
    {
      Demo.NbrActiveLoad += 1;
 8000a84:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a86:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000a90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      WaveFormTrigger();
 8000a94:	f7ff ffae 	bl	80009f4 <WaveFormTrigger>
    }
  }

  /* JOYSTICK LEFT decreases the activated Resistors load */
  if (GPIO_Pin == JOYSTICK_LEFT_Pin)
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	2b10      	cmp	r3, #16
 8000a9c:	d10e      	bne.n	8000abc <HAL_GPIO_EXTI_Callback+0x70>
  {
    /* Clamp the value to Min if over-pressed by user */
    if (Demo.NbrActiveLoad > 0)
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000aa0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d009      	beq.n	8000abc <HAL_GPIO_EXTI_Callback+0x70>
    {
      Demo.NbrActiveLoad -= 1;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000aaa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ab4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      WaveFormTrigger();
 8000ab8:	f7ff ff9c 	bl	80009f4 <WaveFormTrigger>
    }
  }
  
  LoadHandler();
 8000abc:	f000 f862 	bl	8000b84 <LoadHandler>
  
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000003c 	.word	0x2000003c

08000acc <Demo_Error_Handler>:

void Demo_Error_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  while (1)
  {
    /* LED5 (Red LED) is blinking */
    HAL_GPIO_TogglePin(GPIOB, LED_UP_RED_Pin);
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <Demo_Error_Handler+0x18>)
 8000ad4:	f003 fec0 	bl	8004858 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000ad8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000adc:	f000 fffa 	bl	8001ad4 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, LED_UP_RED_Pin);
 8000ae0:	bf00      	nop
 8000ae2:	e7f5      	b.n	8000ad0 <Demo_Error_Handler+0x4>
 8000ae4:	48000400 	.word	0x48000400

08000ae8 <HAL_HRTIM_FreqToTicks>:
 * example code to convert 100ns to ticks
 *   HrtimNsToTicks(&hhrtim1, HRTIM_TIMERID_TIMER_A, 100)
 * @retval number of ticker per ns
 */
uint16_t HAL_HRTIM_FreqToTicks(HRTIM_HandleTypeDef *hhrtim, uint32_t Timers, int Freq)
{
 8000ae8:	b5b0      	push	{r4, r5, r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  int scaleIndex = __HAL_HRTIM_GETCLOCKPRESCALER(hhrtim, Timers);
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d105      	bne.n	8000b06 <HAL_HRTIM_FreqToTicks+0x1e>
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 0307 	and.w	r3, r3, #7
 8000b04:	e008      	b.n	8000b18 <HAL_HRTIM_FreqToTicks+0x30>
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	01db      	lsls	r3, r3, #7
 8000b10:	4413      	add	r3, r2
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f003 0307 	and.w	r3, r3, #7
 8000b18:	617b      	str	r3, [r7, #20]
  uint32_t ticks = (uint32_t)(fHRTIM_HZ * scaleTable[scaleIndex] / Freq);
 8000b1a:	4a19      	ldr	r2, [pc, #100]	@ (8000b80 <HAL_HRTIM_FreqToTicks+0x98>)
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	4413      	add	r3, r2
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fcdb 	bl	80004e0 <__aeabi_f2d>
 8000b2a:	a313      	add	r3, pc, #76	@ (adr r3, 8000b78 <HAL_HRTIM_FreqToTicks+0x90>)
 8000b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b30:	f7ff fd2e 	bl	8000590 <__aeabi_dmul>
 8000b34:	4602      	mov	r2, r0
 8000b36:	460b      	mov	r3, r1
 8000b38:	4614      	mov	r4, r2
 8000b3a:	461d      	mov	r5, r3
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff fcbd 	bl	80004bc <__aeabi_i2d>
 8000b42:	4602      	mov	r2, r0
 8000b44:	460b      	mov	r3, r1
 8000b46:	4620      	mov	r0, r4
 8000b48:	4629      	mov	r1, r5
 8000b4a:	f7ff fe4b 	bl	80007e4 <__aeabi_ddiv>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	460b      	mov	r3, r1
 8000b52:	4610      	mov	r0, r2
 8000b54:	4619      	mov	r1, r3
 8000b56:	f7ff ff2d 	bl	80009b4 <__aeabi_d2uiz>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	613b      	str	r3, [r7, #16]

  return MIN(ticks, UINT16_MAX);
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b64:	4293      	cmp	r3, r2
 8000b66:	bf28      	it	cs
 8000b68:	4613      	movcs	r3, r2
 8000b6a:	b29b      	uxth	r3, r3
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bdb0      	pop	{r4, r5, r7, pc}
 8000b74:	f3af 8000 	nop.w
 8000b78:	00000000 	.word	0x00000000
 8000b7c:	41a443fd 	.word	0x41a443fd
 8000b80:	080073cc 	.word	0x080073cc

08000b84 <LoadHandler>:
/* USER CODE BEGIN 0 */
/**
  * @brief This function handles the loads.
  */
void LoadHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  switch (Demo.NbrActiveLoad)
 8000b88:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <LoadHandler+0xa0>)
 8000b8a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d018      	beq.n	8000bc4 <LoadHandler+0x40>
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d12d      	bne.n	8000bf2 <LoadHandler+0x6e>
  {
  case 2:
    /* Enable Load_1 */
    HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin, GPIO_PIN_SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b9c:	4822      	ldr	r0, [pc, #136]	@ (8000c28 <LoadHandler+0xa4>)
 8000b9e:	f003 fe43 	bl	8004828 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_RIGHT_GREEN_Pin, GPIO_PIN_SET);    
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2180      	movs	r1, #128	@ 0x80
 8000ba6:	4821      	ldr	r0, [pc, #132]	@ (8000c2c <LoadHandler+0xa8>)
 8000ba8:	f003 fe3e 	bl	8004828 <HAL_GPIO_WritePin>
    /* Enable Load_2 */
    HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_2_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bb2:	481d      	ldr	r0, [pc, #116]	@ (8000c28 <LoadHandler+0xa4>)
 8000bb4:	f003 fe38 	bl	8004828 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_LEFT_ORANGE_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2102      	movs	r1, #2
 8000bbc:	481b      	ldr	r0, [pc, #108]	@ (8000c2c <LoadHandler+0xa8>)
 8000bbe:	f003 fe33 	bl	8004828 <HAL_GPIO_WritePin>
    break;
 8000bc2:	e02d      	b.n	8000c20 <LoadHandler+0x9c>
  case 1:
    /* Enable Load_1 */
    HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bca:	4817      	ldr	r0, [pc, #92]	@ (8000c28 <LoadHandler+0xa4>)
 8000bcc:	f003 fe2c 	bl	8004828 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_RIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2180      	movs	r1, #128	@ 0x80
 8000bd4:	4815      	ldr	r0, [pc, #84]	@ (8000c2c <LoadHandler+0xa8>)
 8000bd6:	f003 fe27 	bl	8004828 <HAL_GPIO_WritePin>
    /* Disable Load_2 */
    HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_2_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000be0:	4811      	ldr	r0, [pc, #68]	@ (8000c28 <LoadHandler+0xa4>)
 8000be2:	f003 fe21 	bl	8004828 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_LEFT_ORANGE_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2102      	movs	r1, #2
 8000bea:	4810      	ldr	r0, [pc, #64]	@ (8000c2c <LoadHandler+0xa8>)
 8000bec:	f003 fe1c 	bl	8004828 <HAL_GPIO_WritePin>
    break;
 8000bf0:	e016      	b.n	8000c20 <LoadHandler+0x9c>
  case 0:
  default:
    /* Disable Load_1 */
    HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bf8:	480b      	ldr	r0, [pc, #44]	@ (8000c28 <LoadHandler+0xa4>)
 8000bfa:	f003 fe15 	bl	8004828 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_RIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2180      	movs	r1, #128	@ 0x80
 8000c02:	480a      	ldr	r0, [pc, #40]	@ (8000c2c <LoadHandler+0xa8>)
 8000c04:	f003 fe10 	bl	8004828 <HAL_GPIO_WritePin>
    /* Disable Load_2 */    
    HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_2_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c0e:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <LoadHandler+0xa4>)
 8000c10:	f003 fe0a 	bl	8004828 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED_LEFT_ORANGE_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2102      	movs	r1, #2
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <LoadHandler+0xa8>)
 8000c1a:	f003 fe05 	bl	8004828 <HAL_GPIO_WritePin>
    break;
 8000c1e:	bf00      	nop
  }
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000003c 	.word	0x2000003c
 8000c28:	48000800 	.word	0x48000800
 8000c2c:	48000400 	.word	0x48000400

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  
  // If ~512 ms has elapsed, check if we are doing transient load mode
  // and run the load handler
  if (0 == HAL_GetTick() % 512)
 8000c34:	f000 ff42 	bl	8001abc <HAL_GetTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d114      	bne.n	8000c6c <SysTick_Handler+0x3c>
  {
    if (Demo.bTransient == 1)
 8000c42:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <SysTick_Handler+0x44>)
 8000c44:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d10f      	bne.n	8000c6c <SysTick_Handler+0x3c>
    {
      if (Demo.NbrActiveLoad == 1)
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <SysTick_Handler+0x44>)
 8000c4e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d104      	bne.n	8000c60 <SysTick_Handler+0x30>
      {
        Demo.NbrActiveLoad = 2;
 8000c56:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <SysTick_Handler+0x44>)
 8000c58:	2202      	movs	r2, #2
 8000c5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8000c5e:	e003      	b.n	8000c68 <SysTick_Handler+0x38>
      }
      else 
      {
        Demo.NbrActiveLoad = 1;
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <SysTick_Handler+0x44>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      }     
      LoadHandler();
 8000c68:	f7ff ff8c 	bl	8000b84 <LoadHandler>
    }
  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6c:	f000 ff14 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000003c 	.word	0x2000003c

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7e:	f000 feb8 	bl	80019f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c82:	f000 f8fd 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c86:	f000 fbc9 	bl	800141c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c8a:	f000 fb9d 	bl	80013c8 <MX_DMA_Init>
  MX_RTC_Init();
 8000c8e:	f000 fb6f 	bl	8001370 <MX_RTC_Init>
  MX_ADC1_Init();
 8000c92:	f000 f963 	bl	8000f5c <MX_ADC1_Init>
  MX_HRTIM1_Init();
 8000c96:	f000 f9f9 	bl	800108c <MX_HRTIM1_Init>
  MX_FMAC_Init();
 8000c9a:	f000 f9e3 	bl	8001064 <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */

     /*## Configure the FMAC peripheral ###########################################*/
  sFmacConfig.InputBaseAddress  = INPUT_BUFFER_BASE;
 8000c9e:	4b68      	ldr	r3, [pc, #416]	@ (8000e40 <main+0x1c8>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	701a      	strb	r2, [r3, #0]
  sFmacConfig.InputBufferSize   = INPUT_BUFFER_SIZE;
 8000ca4:	4b66      	ldr	r3, [pc, #408]	@ (8000e40 <main+0x1c8>)
 8000ca6:	2205      	movs	r2, #5
 8000ca8:	705a      	strb	r2, [r3, #1]
  sFmacConfig.InputThreshold    = INPUT_THRESHOLD;
 8000caa:	4b65      	ldr	r3, [pc, #404]	@ (8000e40 <main+0x1c8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  sFmacConfig.CoeffBaseAddress  = COEFFICIENT_BUFFER_BASE;
 8000cb0:	4b63      	ldr	r3, [pc, #396]	@ (8000e40 <main+0x1c8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	721a      	strb	r2, [r3, #8]
  sFmacConfig.CoeffBufferSize   = COEFFICIENT_BUFFER_SIZE;
 8000cb6:	4b62      	ldr	r3, [pc, #392]	@ (8000e40 <main+0x1c8>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	725a      	strb	r2, [r3, #9]
  sFmacConfig.OutputBaseAddress = OUTPUT_BUFFER_BASE;
 8000cbc:	4b60      	ldr	r3, [pc, #384]	@ (8000e40 <main+0x1c8>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	729a      	strb	r2, [r3, #10]
  sFmacConfig.OutputBufferSize  = OUTPUT_BUFFER_SIZE;
 8000cc2:	4b5f      	ldr	r3, [pc, #380]	@ (8000e40 <main+0x1c8>)
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	72da      	strb	r2, [r3, #11]
  sFmacConfig.OutputThreshold   = OUTPUT_THRESHOLD;
 8000cc8:	4b5d      	ldr	r3, [pc, #372]	@ (8000e40 <main+0x1c8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  sFmacConfig.pCoeffA           = aFilterCoeffA;
 8000cce:	4b5c      	ldr	r3, [pc, #368]	@ (8000e40 <main+0x1c8>)
 8000cd0:	4a5c      	ldr	r2, [pc, #368]	@ (8000e44 <main+0x1cc>)
 8000cd2:	611a      	str	r2, [r3, #16]
  sFmacConfig.CoeffASize        = COEFF_VECTOR_A_SIZE;
 8000cd4:	4b5a      	ldr	r3, [pc, #360]	@ (8000e40 <main+0x1c8>)
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	751a      	strb	r2, [r3, #20]
  sFmacConfig.pCoeffB           = aFilterCoeffB;
 8000cda:	4b59      	ldr	r3, [pc, #356]	@ (8000e40 <main+0x1c8>)
 8000cdc:	4a5a      	ldr	r2, [pc, #360]	@ (8000e48 <main+0x1d0>)
 8000cde:	619a      	str	r2, [r3, #24]
  sFmacConfig.CoeffBSize        = COEFF_VECTOR_B_SIZE;
 8000ce0:	4b57      	ldr	r3, [pc, #348]	@ (8000e40 <main+0x1c8>)
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	771a      	strb	r2, [r3, #28]
  sFmacConfig.Filter            = FMAC_FUNC_IIR_DIRECT_FORM_1;
 8000ce6:	4b56      	ldr	r3, [pc, #344]	@ (8000e40 <main+0x1c8>)
 8000ce8:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24
  sFmacConfig.InputAccess       = FMAC_BUFFER_ACCESS_NONE;
 8000cee:	4b54      	ldr	r3, [pc, #336]	@ (8000e40 <main+0x1c8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	775a      	strb	r2, [r3, #29]
  sFmacConfig.OutputAccess      = FMAC_BUFFER_ACCESS_IT;
 8000cf4:	4b52      	ldr	r3, [pc, #328]	@ (8000e40 <main+0x1c8>)
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	779a      	strb	r2, [r3, #30]
  sFmacConfig.Clip              = FMAC_CLIP_ENABLED;
 8000cfa:	4b51      	ldr	r3, [pc, #324]	@ (8000e40 <main+0x1c8>)
 8000cfc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d00:	621a      	str	r2, [r3, #32]
  sFmacConfig.P                 = COEFF_VECTOR_B_SIZE;
 8000d02:	4b4f      	ldr	r3, [pc, #316]	@ (8000e40 <main+0x1c8>)
 8000d04:	2204      	movs	r2, #4
 8000d06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  sFmacConfig.Q                 = COEFF_VECTOR_A_SIZE;
 8000d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e40 <main+0x1c8>)
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  sFmacConfig.R                 = post_shift;
 8000d12:	4b4b      	ldr	r3, [pc, #300]	@ (8000e40 <main+0x1c8>)
 8000d14:	2205      	movs	r2, #5
 8000d16:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  
  if (HAL_FMAC_FilterConfig(&hfmac, &sFmacConfig) != HAL_OK)
 8000d1a:	4949      	ldr	r1, [pc, #292]	@ (8000e40 <main+0x1c8>)
 8000d1c:	484b      	ldr	r0, [pc, #300]	@ (8000e4c <main+0x1d4>)
 8000d1e:	f002 feba 	bl	8003a96 <HAL_FMAC_FilterConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <main+0xb4>
  {
    /* Configuration Error */
    Error_Handler();
 8000d28:	f000 fc54 	bl	80015d4 <Error_Handler>
  }

  /*## Preload the input and output buffers ####################################*/
  if (HAL_FMAC_FilterPreload(&hfmac, NULL, INPUT_BUFFER_SIZE,
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	4b47      	ldr	r3, [pc, #284]	@ (8000e50 <main+0x1d8>)
 8000d32:	2205      	movs	r2, #5
 8000d34:	2100      	movs	r1, #0
 8000d36:	4845      	ldr	r0, [pc, #276]	@ (8000e4c <main+0x1d4>)
 8000d38:	f002 febc 	bl	8003ab4 <HAL_FMAC_FilterPreload>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <main+0xce>
                           aOutputDataToPreload, COEFF_VECTOR_A_SIZE) != HAL_OK)
  {
    /* Configuration Error */
    Error_Handler();
 8000d42:	f000 fc47 	bl	80015d4 <Error_Handler>
  }
  /* Start calculation of IIR filter */
   if (HAL_FMAC_FilterStart(&hfmac,&Fmac_output,&ExpectedCalculatedOutputSize) != HAL_OK)
 8000d46:	4a43      	ldr	r2, [pc, #268]	@ (8000e54 <main+0x1dc>)
 8000d48:	4943      	ldr	r1, [pc, #268]	@ (8000e58 <main+0x1e0>)
 8000d4a:	4840      	ldr	r0, [pc, #256]	@ (8000e4c <main+0x1d4>)
 8000d4c:	f002 fec9 	bl	8003ae2 <HAL_FMAC_FilterStart>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <main+0xe2>
  {
    /* Processing Error */
    Error_Handler();
 8000d56:	f000 fc3d 	bl	80015d4 <Error_Handler>
  }

  /* Perform an ADC automatic self-calibration and enable ADC */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000d5a:	217f      	movs	r1, #127	@ 0x7f
 8000d5c:	483f      	ldr	r0, [pc, #252]	@ (8000e5c <main+0x1e4>)
 8000d5e:	f002 f9e9 	bl	8003134 <HAL_ADCEx_Calibration_Start>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <main+0xf4>
  {
    /* Configuration Error */
    Error_Handler();
 8000d68:	f000 fc34 	bl	80015d4 <Error_Handler>
  }
  
#ifndef RUN_OPEN_LOOP
  /* Start the DMA which is used to move ADC result to the FMAC */
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &hfmac.Instance->WDATA, 1) != HAL_OK)
 8000d6c:	4b37      	ldr	r3, [pc, #220]	@ (8000e4c <main+0x1d4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3318      	adds	r3, #24
 8000d72:	2201      	movs	r2, #1
 8000d74:	4619      	mov	r1, r3
 8000d76:	4839      	ldr	r0, [pc, #228]	@ (8000e5c <main+0x1e4>)
 8000d78:	f001 face 	bl	8002318 <HAL_ADC_Start_DMA>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <main+0x10e>
  {
    /* Configuration Error */
    Error_Handler();
 8000d82:	f000 fc27 	bl	80015d4 <Error_Handler>
  }  
#endif

  /* Calculate PWM period and update timer register */
  Demo.periodBuck = HAL_HRTIM_FreqToTicks(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, SwitchFreq);
 8000d86:	4a36      	ldr	r2, [pc, #216]	@ (8000e60 <main+0x1e8>)
 8000d88:	2102      	movs	r1, #2
 8000d8a:	4836      	ldr	r0, [pc, #216]	@ (8000e64 <main+0x1ec>)
 8000d8c:	f7ff feac 	bl	8000ae8 <HAL_HRTIM_FreqToTicks>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b34      	ldr	r3, [pc, #208]	@ (8000e68 <main+0x1f0>)
 8000d96:	64da      	str	r2, [r3, #76]	@ 0x4c
  __HAL_HRTIM_SETPERIOD(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, Demo.periodBuck);
 8000d98:	4b32      	ldr	r3, [pc, #200]	@ (8000e64 <main+0x1ec>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a32      	ldr	r2, [pc, #200]	@ (8000e68 <main+0x1f0>)
 8000d9e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000da0:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
#ifdef RUN_OPEN_LOOP  
  /* Open loop so run with a small fixed duty cycle */
  __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, Demo.periodBuck * 5 / 100);
#else
  /* Set max duty to 80% of period */
  __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, Demo.periodBuck * 80 / 100);
 8000da4:	4b30      	ldr	r3, [pc, #192]	@ (8000e68 <main+0x1f0>)
 8000da6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <main+0x1ec>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a2d      	ldr	r2, [pc, #180]	@ (8000e6c <main+0x1f4>)
 8000db8:	fba2 1201 	umull	r1, r2, r2, r1
 8000dbc:	0952      	lsrs	r2, r2, #5
 8000dbe:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
#endif 

  /* Start the PWMs */
  HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TC1 | HRTIM_OUTPUT_TC2);
 8000dc2:	2130      	movs	r1, #48	@ 0x30
 8000dc4:	4827      	ldr	r0, [pc, #156]	@ (8000e64 <main+0x1ec>)
 8000dc6:	f004 fd12 	bl	80057ee <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_C);
 8000dca:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8000dce:	4825      	ldr	r0, [pc, #148]	@ (8000e64 <main+0x1ec>)
 8000dd0:	f004 fd3a 	bl	8005848 <HAL_HRTIM_WaveformCountStart>

  
  /* Enable T6 for Buck only mode usage */
  HAL_GPIO_WritePin(GPIOB, BUCKBOOST_P2_DRIVE_Pin, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dda:	4825      	ldr	r0, [pc, #148]	@ (8000e70 <main+0x1f8>)
 8000ddc:	f003 fd24 	bl	8004828 <HAL_GPIO_WritePin>

  Waveform.m_State = WAVEFORM_WAIT_FOR_TRIGGER;
 8000de0:	4b24      	ldr	r3, [pc, #144]	@ (8000e74 <main+0x1fc>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (bTransient)
 8000de8:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <main+0x200>)
 8000dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d01d      	beq.n	8000e2e <main+0x1b6>
    {
      
      HAL_GPIO_WritePin(GPIOA, LED_DOWN_BLUE_Pin, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfc:	f003 fd14 	bl	8004828 <HAL_GPIO_WritePin>

      // Toggle both Loads
      HAL_GPIO_TogglePin(GPIOC, BUCKBOOST_LOAD_1_Pin);
 8000e00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e04:	481d      	ldr	r0, [pc, #116]	@ (8000e7c <main+0x204>)
 8000e06:	f003 fd27 	bl	8004858 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOC, BUCKBOOST_LOAD_2_Pin);
 8000e0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e0e:	481b      	ldr	r0, [pc, #108]	@ (8000e7c <main+0x204>)
 8000e10:	f003 fd22 	bl	8004858 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOB, LED_RIGHT_GREEN_Pin);
 8000e14:	2180      	movs	r1, #128	@ 0x80
 8000e16:	4816      	ldr	r0, [pc, #88]	@ (8000e70 <main+0x1f8>)
 8000e18:	f003 fd1e 	bl	8004858 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(GPIOB, LED_LEFT_ORANGE_Pin);
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4814      	ldr	r0, [pc, #80]	@ (8000e70 <main+0x1f8>)
 8000e20:	f003 fd1a 	bl	8004858 <HAL_GPIO_TogglePin>
          
      // Delay
      HAL_Delay(500);    
 8000e24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e28:	f000 fe54 	bl	8001ad4 <HAL_Delay>
 8000e2c:	e7dc      	b.n	8000de8 <main+0x170>
    } else {
      HAL_GPIO_WritePin(GPIOA, LED_DOWN_BLUE_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e38:	f003 fcf6 	bl	8004828 <HAL_GPIO_WritePin>
    if (bTransient)
 8000e3c:	e7d4      	b.n	8000de8 <main+0x170>
 8000e3e:	bf00      	nop
 8000e40:	200004c4 	.word	0x200004c4
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000368 	.word	0x20000368
 8000e50:	200004f0 	.word	0x200004f0
 8000e54:	20000010 	.word	0x20000010
 8000e58:	200004f6 	.word	0x200004f6
 8000e5c:	2000029c 	.word	0x2000029c
 8000e60:	00030d40 	.word	0x00030d40
 8000e64:	200003a0 	.word	0x200003a0
 8000e68:	2000003c 	.word	0x2000003c
 8000e6c:	51eb851f 	.word	0x51eb851f
 8000e70:	48000400 	.word	0x48000400
 8000e74:	20000094 	.word	0x20000094
 8000e78:	200004f8 	.word	0x200004f8
 8000e7c:	48000800 	.word	0x48000800

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0a8      	sub	sp, #160	@ 0xa0
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000e8a:	2238      	movs	r2, #56	@ 0x38
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f006 fa63 	bl	800735a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2254      	movs	r2, #84	@ 0x54
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f006 fa55 	bl	800735a <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f005 f93d 	bl	8006130 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ebe:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec0:	2340      	movs	r3, #64	@ 0x40
 8000ec2:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000eda:	2355      	movs	r3, #85	@ 0x55
 8000edc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f005 f9ce 	bl	8006298 <HAL_RCC_OscConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000f02:	f000 fb67 	bl	80015d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	230f      	movs	r3, #15
 8000f08:	657b      	str	r3, [r7, #84]	@ 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f16:	2300      	movs	r3, #0
 8000f18:	667b      	str	r3, [r7, #100]	@ 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000f1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f1e:	2108      	movs	r1, #8
 8000f20:	4618      	mov	r0, r3
 8000f22:	f005 fccb 	bl	80068bc <HAL_RCC_ClockConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f2c:	f000 fb52 	bl	80015d4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC12;
 8000f30:	f44f 2308 	mov.w	r3, #557056	@ 0x88000
 8000f34:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000f36:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f3a:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f40:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	4618      	mov	r0, r3
 8000f46:	f005 fe9d 	bl	8006c84 <HAL_RCCEx_PeriphCLKConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000f50:	f000 fb40 	bl	80015d4 <Error_Handler>
  }
}
 8000f54:	bf00      	nop
 8000f56:	37a0      	adds	r7, #160	@ 0xa0
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2220      	movs	r2, #32
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f006 f9f0 	bl	800735a <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000f7a:	4b38      	ldr	r3, [pc, #224]	@ (800105c <MX_ADC1_Init+0x100>)
 8000f7c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f82:	4b36      	ldr	r3, [pc, #216]	@ (800105c <MX_ADC1_Init+0x100>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f88:	4b34      	ldr	r3, [pc, #208]	@ (800105c <MX_ADC1_Init+0x100>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000f8e:	4b33      	ldr	r3, [pc, #204]	@ (800105c <MX_ADC1_Init+0x100>)
 8000f90:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f94:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f96:	4b31      	ldr	r3, [pc, #196]	@ (800105c <MX_ADC1_Init+0x100>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800105c <MX_ADC1_Init+0x100>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800105c <MX_ADC1_Init+0x100>)
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800105c <MX_ADC1_Init+0x100>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fae:	4b2b      	ldr	r3, [pc, #172]	@ (800105c <MX_ADC1_Init+0x100>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fb4:	4b29      	ldr	r3, [pc, #164]	@ (800105c <MX_ADC1_Init+0x100>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fba:	4b28      	ldr	r3, [pc, #160]	@ (800105c <MX_ADC1_Init+0x100>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	@ (800105c <MX_ADC1_Init+0x100>)
 8000fc4:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8000fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fca:	4b24      	ldr	r3, [pc, #144]	@ (800105c <MX_ADC1_Init+0x100>)
 8000fcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fd2:	4b22      	ldr	r3, [pc, #136]	@ (800105c <MX_ADC1_Init+0x100>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fda:	4b20      	ldr	r3, [pc, #128]	@ (800105c <MX_ADC1_Init+0x100>)
 8000fdc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800105c <MX_ADC1_Init+0x100>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fea:	481c      	ldr	r0, [pc, #112]	@ (800105c <MX_ADC1_Init+0x100>)
 8000fec:	f000 ffd8 	bl	8001fa0 <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000ff6:	f000 faed 	bl	80015d4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ffe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001002:	4619      	mov	r1, r3
 8001004:	4815      	ldr	r0, [pc, #84]	@ (800105c <MX_ADC1_Init+0x100>)
 8001006:	f002 f8f7 	bl	80031f8 <HAL_ADCEx_MultiModeConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001010:	f000 fae0 	bl	80015d4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <MX_ADC1_Init+0x104>)
 8001016:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001018:	2306      	movs	r3, #6
 800101a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001020:	237f      	movs	r3, #127	@ 0x7f
 8001022:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  sConfig.Offset = REF;
 8001028:	f240 3307 	movw	r3, #775	@ 0x307
 800102c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_NEGATIVE;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4807      	ldr	r0, [pc, #28]	@ (800105c <MX_ADC1_Init+0x100>)
 800103e:	f001 fa5d 	bl	80024fc <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001048:	f000 fac4 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* CubeMX enables DMA interrupt even if not configured */
  HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);
 800104c:	200b      	movs	r0, #11
 800104e:	f002 fb02 	bl	8003656 <HAL_NVIC_DisableIRQ>
  /* USER CODE END ADC1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	3730      	adds	r7, #48	@ 0x30
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000029c 	.word	0x2000029c
 8001060:	10c00010 	.word	0x10c00010

08001064 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_FMAC_Init+0x20>)
 800106a:	4a07      	ldr	r2, [pc, #28]	@ (8001088 <MX_FMAC_Init+0x24>)
 800106c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <MX_FMAC_Init+0x20>)
 8001070:	f002 fcd0 	bl	8003a14 <HAL_FMAC_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800107a:	f000 faab 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000368 	.word	0x20000368
 8001088:	40021400 	.word	0x40021400

0800108c <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0ba      	sub	sp, #232	@ 0xe8
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8001092:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800109c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80010aa:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80010be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010c2:	2260      	movs	r2, #96	@ 0x60
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f006 f947 	bl	800735a <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80010cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	2224      	movs	r2, #36	@ 0x24
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f006 f93a 	bl	800735a <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2220      	movs	r2, #32
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f006 f934 	bl	800735a <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80010f2:	4b9d      	ldr	r3, [pc, #628]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 80010f4:	4a9d      	ldr	r2, [pc, #628]	@ (800136c <MX_HRTIM1_Init+0x2e0>)
 80010f6:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80010f8:	4b9b      	ldr	r3, [pc, #620]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80010fe:	4b9a      	ldr	r3, [pc, #616]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8001104:	4898      	ldr	r0, [pc, #608]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 8001106:	f003 fbd9 	bl	80048bc <HAL_HRTIM_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8001110:	f000 fa60 	bl	80015d4 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8001114:	210c      	movs	r1, #12
 8001116:	4894      	ldr	r0, [pc, #592]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 8001118:	f003 fca0 	bl	8004a5c <HAL_HRTIM_DLLCalibrationStart>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8001122:	f000 fa57 	bl	80015d4 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001126:	210a      	movs	r1, #10
 8001128:	488f      	ldr	r0, [pc, #572]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 800112a:	f003 fcef 	bl	8004b0c <HAL_HRTIM_PollForDLLCalibration>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8001134:	f000 fa4e 	bl	80015d4 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_C;
 8001138:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800113c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERC_CMP3;
 8001140:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001144:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8001148:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800114c:	461a      	mov	r2, r3
 800114e:	2101      	movs	r1, #1
 8001150:	4885      	ldr	r0, [pc, #532]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 8001152:	f003 fd37 	bl	8004bc4 <HAL_HRTIM_ADCTriggerConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_HRTIM1_Init+0xd4>
  {
    Error_Handler();
 800115c:	f000 fa3a 	bl	80015d4 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 8001160:	2200      	movs	r2, #0
 8001162:	2101      	movs	r1, #1
 8001164:	4880      	ldr	r0, [pc, #512]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 8001166:	f003 ff19 	bl	8004f9c <HAL_HRTIM_ADCPostScalerConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_HRTIM1_Init+0xe8>
  {
    Error_Handler();
 8001170:	f000 fa30 	bl	80015d4 <Error_Handler>
  }
  pTimeBaseCfg.Period = 27200;
 8001174:	f646 2340 	movw	r3, #27200	@ 0x6a40
 8001178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001188:	2308      	movs	r3, #8
 800118a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 800118e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001192:	461a      	mov	r2, r3
 8001194:	2102      	movs	r1, #2
 8001196:	4874      	ldr	r0, [pc, #464]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 8001198:	f003 fcec 	bl	8004b74 <HAL_HRTIM_TimeBaseConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_HRTIM1_Init+0x11a>
  {
    Error_Handler();
 80011a2:	f000 fa17 	bl	80015d4 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  pTimerCtl.TrigHalf = HRTIM_TIMERTRIGHALF_DISABLED;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 80011c4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80011c8:	461a      	mov	r2, r3
 80011ca:	2102      	movs	r1, #2
 80011cc:	4866      	ldr	r0, [pc, #408]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 80011ce:	f004 f8bc 	bl	800534a <HAL_HRTIM_WaveformTimerControl>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_HRTIM1_Init+0x150>
  {
    Error_Handler();
 80011d8:	f000 f9fc 	bl	80015d4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80011dc:	2300      	movs	r3, #0
 80011de:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.DMASrcAddress = 0x0000;
 80011e4:	2300      	movs	r3, #0
 80011e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.DMADstAddress = 0x0000;
 80011e8:	2300      	movs	r3, #0
 80011ea:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.DMASize = 0x1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80011f0:	2300      	movs	r3, #0
 80011f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80011f4:	2300      	movs	r3, #0
 80011f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80011f8:	2300      	movs	r3, #0
 80011fa:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80011fc:	2300      	movs	r3, #0
 80011fe:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001200:	2300      	movs	r3, #0
 8001202:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001204:	2300      	movs	r3, #0
 8001206:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 800122c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8001252:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001256:	461a      	mov	r2, r3
 8001258:	2102      	movs	r1, #2
 800125a:	4843      	ldr	r0, [pc, #268]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 800125c:	f003 ffe8 	bl	8005230 <HAL_HRTIM_WaveformTimerConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_HRTIM1_Init+0x1de>
  {
    Error_Handler();
 8001266:	f000 f9b5 	bl	80015d4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800126e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001272:	2201      	movs	r2, #1
 8001274:	2102      	movs	r1, #2
 8001276:	483c      	ldr	r0, [pc, #240]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 8001278:	f004 f91a 	bl	80054b0 <HAL_HRTIM_WaveformCompareConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_HRTIM1_Init+0x1fa>
  {
    Error_Handler();
 8001282:	f000 f9a7 	bl	80015d4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 24480;
 8001286:	f645 73a0 	movw	r3, #24480	@ 0x5fa0
 800128a:	64bb      	str	r3, [r7, #72]	@ 0x48
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800128c:	2300      	movs	r3, #0
 800128e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001290:	2300      	movs	r3, #0
 8001292:	653b      	str	r3, [r7, #80]	@ 0x50

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001294:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001298:	2202      	movs	r2, #2
 800129a:	2102      	movs	r1, #2
 800129c:	4832      	ldr	r0, [pc, #200]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 800129e:	f004 f907 	bl	80054b0 <HAL_HRTIM_WaveformCompareConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_HRTIM1_Init+0x220>
  {
    Error_Handler();
 80012a8:	f000 f994 	bl	80015d4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 50;
 80012ac:	2332      	movs	r3, #50	@ 0x32
 80012ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80012b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012b4:	2204      	movs	r2, #4
 80012b6:	2102      	movs	r1, #2
 80012b8:	482b      	ldr	r0, [pc, #172]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 80012ba:	f004 f8f9 	bl	80054b0 <HAL_HRTIM_WaveformCompareConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_HRTIM1_Init+0x23c>
  {
    Error_Handler();
 80012c4:	f000 f986 	bl	80015d4 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
  pDeadTimeCfg.RisingValue = 75;
 80012cc:	234b      	movs	r3, #75	@ 0x4b
 80012ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	633b      	str	r3, [r7, #48]	@ 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	@ 0x34
  pDeadTimeCfg.FallingValue = 300;
 80012dc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80012e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	643b      	str	r3, [r7, #64]	@ 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pDeadTimeCfg) != HAL_OK)
 80012ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f2:	461a      	mov	r2, r3
 80012f4:	2102      	movs	r1, #2
 80012f6:	481c      	ldr	r0, [pc, #112]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 80012f8:	f004 f85a 	bl	80053b0 <HAL_HRTIM_DeadTimeConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_HRTIM1_Init+0x27a>
  {
    Error_Handler();
 8001302:	f000 f967 	bl	80015d4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 800130a:	2304      	movs	r3, #4
 800130c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1|HRTIM_OUTPUTRESET_TIMCMP2;
 800130e:	2318      	movs	r3, #24
 8001310:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_INACTIVE;
 800131a:	2320      	movs	r3, #32
 800131c:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2210      	movs	r2, #16
 800132a:	2102      	movs	r1, #2
 800132c:	480e      	ldr	r0, [pc, #56]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 800132e:	f004 fa2d 	bl	800578c <HAL_HRTIM_WaveformOutputConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_HRTIM1_Init+0x2b0>
  {
    Error_Handler();
 8001338:	f000 f94c 	bl	80015d4 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2220      	movs	r2, #32
 8001348:	2102      	movs	r1, #2
 800134a:	4807      	ldr	r0, [pc, #28]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 800134c:	f004 fa1e 	bl	800578c <HAL_HRTIM_WaveformOutputConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_HRTIM1_Init+0x2ce>
  {
    Error_Handler();
 8001356:	f000 f93d 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 800135a:	4803      	ldr	r0, [pc, #12]	@ (8001368 <MX_HRTIM1_Init+0x2dc>)
 800135c:	f000 fa48 	bl	80017f0 <HAL_HRTIM_MspPostInit>

}
 8001360:	bf00      	nop
 8001362:	37e8      	adds	r7, #232	@ 0xe8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200003a0 	.word	0x200003a0
 800136c:	40016800 	.word	0x40016800

08001370 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001374:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <MX_RTC_Init+0x50>)
 8001376:	4a13      	ldr	r2, [pc, #76]	@ (80013c4 <MX_RTC_Init+0x54>)
 8001378:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_RTC_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <MX_RTC_Init+0x50>)
 8001382:	227f      	movs	r2, #127	@ 0x7f
 8001384:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MX_RTC_Init+0x50>)
 8001388:	22ff      	movs	r2, #255	@ 0xff
 800138a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_RTC_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <MX_RTC_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_RTC_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MX_RTC_Init+0x50>)
 80013a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_RTC_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	@ (80013c0 <MX_RTC_Init+0x50>)
 80013ae:	f005 feb7 	bl	8007120 <HAL_RTC_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80013b8:	f000 f90c 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2000049c 	.word	0x2000049c
 80013c4:	40002800 	.word	0x40002800

080013c8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <MX_DMA_Init+0x50>)
 80013d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d2:	4a11      	ldr	r2, [pc, #68]	@ (8001418 <MX_DMA_Init+0x50>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <MX_DMA_Init+0x50>)
 80013dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_DMA_Init+0x50>)
 80013e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001418 <MX_DMA_Init+0x50>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_DMA_Init+0x50>)
 80013f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	200b      	movs	r0, #11
 8001404:	f002 f8ff 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001408:	200b      	movs	r0, #11
 800140a:	f002 f916 	bl	800363a <HAL_NVIC_EnableIRQ>

}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001432:	4b65      	ldr	r3, [pc, #404]	@ (80015c8 <MX_GPIO_Init+0x1ac>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	4a64      	ldr	r2, [pc, #400]	@ (80015c8 <MX_GPIO_Init+0x1ac>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143e:	4b62      	ldr	r3, [pc, #392]	@ (80015c8 <MX_GPIO_Init+0x1ac>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b5f      	ldr	r3, [pc, #380]	@ (80015c8 <MX_GPIO_Init+0x1ac>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	4a5e      	ldr	r2, [pc, #376]	@ (80015c8 <MX_GPIO_Init+0x1ac>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001456:	4b5c      	ldr	r3, [pc, #368]	@ (80015c8 <MX_GPIO_Init+0x1ac>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b59      	ldr	r3, [pc, #356]	@ (80015c8 <MX_GPIO_Init+0x1ac>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	4a58      	ldr	r2, [pc, #352]	@ (80015c8 <MX_GPIO_Init+0x1ac>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146e:	4b56      	ldr	r3, [pc, #344]	@ (80015c8 <MX_GPIO_Init+0x1ac>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001480:	4852      	ldr	r0, [pc, #328]	@ (80015cc <MX_GPIO_Init+0x1b0>)
 8001482:	f003 f9d1 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUCKBOOST_USBPD_EN_GPIO_Port, BUCKBOOST_USBPD_EN_Pin, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	2108      	movs	r1, #8
 800148a:	4850      	ldr	r0, [pc, #320]	@ (80015cc <MX_GPIO_Init+0x1b0>)
 800148c:	f003 f9cc 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_LEFT_ORANGE_Pin|BUCKBOOST_P2_DRIVE_Pin|LED_UP_RED_Pin|LED_RIGHT_GREEN_Pin 
 8001490:	2200      	movs	r2, #0
 8001492:	f248 21a2 	movw	r1, #33442	@ 0x82a2
 8001496:	484e      	ldr	r0, [pc, #312]	@ (80015d0 <MX_GPIO_Init+0x1b4>)
 8001498:	f003 f9c6 	bl	8004828 <HAL_GPIO_WritePin>
                          |GPO1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DOWN_BLUE_GPIO_Port, LED_DOWN_BLUE_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a6:	f003 f9bf 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOYSTICK_SELECT_Pin JOYSTICK_LEFT_Pin JOYSTICK_DOWN_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_SELECT_Pin|JOYSTICK_LEFT_Pin|JOYSTICK_DOWN_Pin;
 80014aa:	f242 0330 	movw	r3, #8240	@ 0x2030
 80014ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	4619      	mov	r1, r3
 80014c0:	4842      	ldr	r0, [pc, #264]	@ (80015cc <MX_GPIO_Init+0x1b0>)
 80014c2:	f003 f82f 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUCKBOOST_LOAD_1_Pin BUCKBOOST_LOAD_2_Pin BUCKBOOST_USBPD_EN_Pin */
  GPIO_InitStruct.Pin = BUCKBOOST_LOAD_1_Pin|BUCKBOOST_LOAD_2_Pin|BUCKBOOST_USBPD_EN_Pin;
 80014c6:	f24c 0308 	movw	r3, #49160	@ 0xc008
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	4619      	mov	r1, r3
 80014de:	483b      	ldr	r0, [pc, #236]	@ (80015cc <MX_GPIO_Init+0x1b0>)
 80014e0:	f003 f820 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_LEFT_ORANGE_Pin BUCKBOOST_P2_DRIVE_Pin LED_UP_RED_Pin LED_RIGHT_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_LEFT_ORANGE_Pin|BUCKBOOST_P2_DRIVE_Pin|LED_UP_RED_Pin|LED_RIGHT_GREEN_Pin;
 80014e4:	f248 03a2 	movw	r3, #32930	@ 0x80a2
 80014e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4619      	mov	r1, r3
 80014fc:	4834      	ldr	r0, [pc, #208]	@ (80015d0 <MX_GPIO_Init+0x1b4>)
 80014fe:	f003 f811 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOYSTICK_RIGHT_Pin JOYSTICK_UP_Pin */
  GPIO_InitStruct.Pin = JOYSTICK_RIGHT_Pin|JOYSTICK_UP_Pin;
 8001502:	f240 4304 	movw	r3, #1028	@ 0x404
 8001506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001508:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800150c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150e:	2301      	movs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	4619      	mov	r1, r3
 8001518:	482d      	ldr	r0, [pc, #180]	@ (80015d0 <MX_GPIO_Init+0x1b4>)
 800151a:	f003 f803 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DOWN_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_DOWN_BLUE_Pin;
 800151e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_DOWN_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4619      	mov	r1, r3
 8001536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800153a:	f002 fff3 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800153e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001550:	2307      	movs	r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4619      	mov	r1, r3
 800155a:	481c      	ldr	r0, [pc, #112]	@ (80015cc <MX_GPIO_Init+0x1b0>)
 800155c:	f002 ffe2 	bl	8004524 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPO1_Pin */
  GPIO_InitStruct.Pin = GPO1_Pin;
 8001560:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPO1_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	4619      	mov	r1, r3
 8001578:	4815      	ldr	r0, [pc, #84]	@ (80015d0 <MX_GPIO_Init+0x1b4>)
 800157a:	f002 ffd3 	bl	8004524 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2008      	movs	r0, #8
 8001584:	f002 f83f 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001588:	2008      	movs	r0, #8
 800158a:	f002 f856 	bl	800363a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	200a      	movs	r0, #10
 8001594:	f002 f837 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001598:	200a      	movs	r0, #10
 800159a:	f002 f84e 	bl	800363a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2017      	movs	r0, #23
 80015a4:	f002 f82f 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015a8:	2017      	movs	r0, #23
 80015aa:	f002 f846 	bl	800363a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2028      	movs	r0, #40	@ 0x28
 80015b4:	f002 f827 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015b8:	2028      	movs	r0, #40	@ 0x28
 80015ba:	f002 f83e 	bl	800363a <HAL_NVIC_EnableIRQ>

}
 80015be:	bf00      	nop
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	48000800 	.word	0x48000800
 80015d0:	48000400 	.word	0x48000400

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	Demo_Error_Handler();
 80015d8:	f7ff fa78 	bl	8000acc <Demo_Error_Handler>

  /* USER CODE END Error_Handler_Debug */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <HAL_MspInit+0x44>)
 80015e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001624 <HAL_MspInit+0x44>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <HAL_MspInit+0x44>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

 80015fe:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <HAL_MspInit+0x44>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001602:	4a08      	ldr	r2, [pc, #32]	@ (8001624 <HAL_MspInit+0x44>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001608:	6593      	str	r3, [r2, #88]	@ 0x58
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_MspInit+0x44>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();

 8001616:	f004 fe2f 	bl	8006278 <HAL_PWREx_DisableUCPDDeadBattery>
  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}

 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	b580      	push	{r7, lr}
 800162a:	b0a0      	sub	sp, #128	@ 0x80
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001630:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  {
 8001640:	f107 0318 	add.w	r3, r7, #24
 8001644:	2254      	movs	r2, #84	@ 0x54
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f005 fe86 	bl	800735a <memset>
  /* USER CODE BEGIN ADC1_MspInit 0 */
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001656:	d178      	bne.n	800174a <HAL_ADC_MspInit+0x122>
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**ADC1 GPIO Configuration    
 8001658:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800165c:	61bb      	str	r3, [r7, #24]
    PA1     ------> ADC1_IN2
 800165e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001662:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PA2     ------> ADC1_IN3
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	4618      	mov	r0, r3
 800166a:	f005 fb0b 	bl	8006c84 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_ADC_MspInit+0x50>
    PA3     ------> ADC1_IN4
    PB11     ------> ADC1_IN14 
 8001674:	f7ff ffae 	bl	80015d4 <Error_Handler>
    */
    GPIO_InitStruct.Pin = BUCKBOOST_VIN_Pin|BUCKBOOST_I_IN_AVG_Pin|BUCKBOOST_VOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	4b36      	ldr	r3, [pc, #216]	@ (8001754 <HAL_ADC_MspInit+0x12c>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167c:	4a35      	ldr	r2, [pc, #212]	@ (8001754 <HAL_ADC_MspInit+0x12c>)
 800167e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001684:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <HAL_ADC_MspInit+0x12c>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

 8001690:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <HAL_ADC_MspInit+0x12c>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001694:	4a2f      	ldr	r2, [pc, #188]	@ (8001754 <HAL_ADC_MspInit+0x12c>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169c:	4b2d      	ldr	r3, [pc, #180]	@ (8001754 <HAL_ADC_MspInit+0x12c>)
 800169e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BUCKBOOST_I_IN_SENSE_Pin;
 80016a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <HAL_ADC_MspInit+0x12c>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ac:	4a29      	ldr	r2, [pc, #164]	@ (8001754 <HAL_ADC_MspInit+0x12c>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b4:	4b27      	ldr	r3, [pc, #156]	@ (8001754 <HAL_ADC_MspInit+0x12c>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(BUCKBOOST_I_IN_SENSE_GPIO_Port, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016c0:	230e      	movs	r3, #14
 80016c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80016c4:	2303      	movs	r3, #3
 80016c6:	673b      	str	r3, [r7, #112]	@ 0x70
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c8:	2300      	movs	r3, #0
 80016ca:	677b      	str	r3, [r7, #116]	@ 0x74
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016d0:	4619      	mov	r1, r3
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d6:	f002 ff25 	bl	8004524 <HAL_GPIO_Init>
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016e0:	2303      	movs	r3, #3
 80016e2:	673b      	str	r3, [r7, #112]	@ 0x70
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016e4:	2300      	movs	r3, #0
 80016e6:	677b      	str	r3, [r7, #116]	@ 0x74
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016ec:	4619      	mov	r1, r3
 80016ee:	481a      	ldr	r0, [pc, #104]	@ (8001758 <HAL_ADC_MspInit+0x130>)
 80016f0:	f002 ff18 	bl	8004524 <HAL_GPIO_Init>
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
    {
      Error_Handler();
    }
 80016f4:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_ADC_MspInit+0x134>)
 80016f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001760 <HAL_ADC_MspInit+0x138>)
 80016f8:	601a      	str	r2, [r3, #0]

 80016fa:	4b18      	ldr	r3, [pc, #96]	@ (800175c <HAL_ADC_MspInit+0x134>)
 80016fc:	2205      	movs	r2, #5
 80016fe:	605a      	str	r2, [r3, #4]
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001700:	4b16      	ldr	r3, [pc, #88]	@ (800175c <HAL_ADC_MspInit+0x134>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]

 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <HAL_ADC_MspInit+0x134>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */
 800170c:	4b13      	ldr	r3, [pc, #76]	@ (800175c <HAL_ADC_MspInit+0x134>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]

 8001712:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_ADC_MspInit+0x134>)
 8001714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001718:	615a      	str	r2, [r3, #20]
  /* USER CODE END ADC1_MspInit 1 */
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <HAL_ADC_MspInit+0x134>)
 800171c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001720:	619a      	str	r2, [r3, #24]
  }
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <HAL_ADC_MspInit+0x134>)
 8001724:	2220      	movs	r2, #32
 8001726:	61da      	str	r2, [r3, #28]

 8001728:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <HAL_ADC_MspInit+0x134>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
}
 800172e:	480b      	ldr	r0, [pc, #44]	@ (800175c <HAL_ADC_MspInit+0x134>)
 8001730:	f001 ffac 	bl	800368c <HAL_DMA_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_ADC_MspInit+0x116>

/**
 800173a:	f7ff ff4b 	bl	80015d4 <Error_Handler>
* @brief ADC MSP De-Initialization
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a06      	ldr	r2, [pc, #24]	@ (800175c <HAL_ADC_MspInit+0x134>)
 8001742:	655a      	str	r2, [r3, #84]	@ 0x54
 8001744:	4a05      	ldr	r2, [pc, #20]	@ (800175c <HAL_ADC_MspInit+0x134>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6293      	str	r3, [r2, #40]	@ 0x28
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

 800174a:	bf00      	nop
 800174c:	3780      	adds	r7, #128	@ 0x80
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	48000400 	.word	0x48000400
 800175c:	20000308 	.word	0x20000308
 8001760:	40020008 	.word	0x40020008

08001764 <HAL_FMAC_MspInit>:
    /* FMAC interrupt Init */
    HAL_NVIC_SetPriority(FMAC_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(FMAC_IRQn);
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  }
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <HAL_FMAC_MspInit+0x44>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d113      	bne.n	800179e <HAL_FMAC_MspInit+0x3a>

}

/**
* @brief FMAC MSP De-Initialization
* This function freeze the hardware resources used in this example
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <HAL_FMAC_MspInit+0x48>)
 8001778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800177a:	4a0c      	ldr	r2, [pc, #48]	@ (80017ac <HAL_FMAC_MspInit+0x48>)
 800177c:	f043 0310 	orr.w	r3, r3, #16
 8001780:	6493      	str	r3, [r2, #72]	@ 0x48
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <HAL_FMAC_MspInit+0x48>)
 8001784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
* @param hfmac: FMAC handle pointer
* @retval None
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	2065      	movs	r0, #101	@ 0x65
 8001794:	f001 ff37 	bl	8003606 <HAL_NVIC_SetPriority>
*/
 8001798:	2065      	movs	r0, #101	@ 0x65
 800179a:	f001 ff4e 	bl	800363a <HAL_NVIC_EnableIRQ>
{
  if(hfmac->Instance==FMAC)
  {
  /* USER CODE BEGIN FMAC_MspDeInit 0 */

  /* USER CODE END FMAC_MspDeInit 0 */
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40021400 	.word	0x40021400
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_HRTIM_MspInit>:

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}

 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <HAL_HRTIM_MspInit+0x38>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d10b      	bne.n	80017da <HAL_HRTIM_MspInit+0x2a>
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hhrtim->Instance==HRTIM1)
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <HAL_HRTIM_MspInit+0x3c>)
 80017c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c6:	4a09      	ldr	r2, [pc, #36]	@ (80017ec <HAL_HRTIM_MspInit+0x3c>)
 80017c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <HAL_HRTIM_MspInit+0x3c>)
 80017d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**HRTIM1 GPIO Configuration    
    PB12     ------> HRTIM1_CHC1
    PB13     ------> HRTIM1_CHC2
    PB14     ------> HRTIM1_CHD1 
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40016800 	.word	0x40016800
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_HRTIM_MspPostInit>:
    */
    GPIO_InitStruct.Pin = BUCKBOOST_P1_DRIVE_Pin|BUCKBOOST_N1_DRIVE_Pin|BUCKBOOST_N2_DRIVE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a11      	ldr	r2, [pc, #68]	@ (8001854 <HAL_HRTIM_MspPostInit+0x64>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d11c      	bne.n	800184c <HAL_HRTIM_MspPostInit+0x5c>
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <HAL_HRTIM_MspPostInit+0x68>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	4a10      	ldr	r2, [pc, #64]	@ (8001858 <HAL_HRTIM_MspPostInit+0x68>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <HAL_HRTIM_MspPostInit+0x68>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  }

}
/**
* @brief HRTIM MSP De-Initialization
* This function freeze the hardware resources used in this example
 800182a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800182e:	60fb      	str	r3, [r7, #12]
* @param hhrtim: HRTIM handle pointer
 8001830:	2302      	movs	r3, #2
 8001832:	613b      	str	r3, [r7, #16]
* @retval None
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
*/
 8001838:	2303      	movs	r3, #3
 800183a:	61bb      	str	r3, [r7, #24]
void HAL_HRTIM_MspDeInit(HRTIM_HandleTypeDef* hhrtim)
 800183c:	230d      	movs	r3, #13
 800183e:	61fb      	str	r3, [r7, #28]
{
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	4805      	ldr	r0, [pc, #20]	@ (800185c <HAL_HRTIM_MspPostInit+0x6c>)
 8001848:	f002 fe6c 	bl	8004524 <HAL_GPIO_Init>
  {
  /* USER CODE BEGIN HRTIM1_MspDeInit 0 */

  /* USER CODE END HRTIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_HRTIM1_CLK_DISABLE();
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40016800 	.word	0x40016800
 8001858:	40021000 	.word	0x40021000
 800185c:	48000400 	.word	0x48000400

08001860 <HAL_RTC_MspInit>:
  /* USER CODE END RTC_MspInit 1 */
  }

}

/**
 8001860:	b580      	push	{r7, lr}
 8001862:	b098      	sub	sp, #96	@ 0x60
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
* @brief RTC MSP De-Initialization
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2254      	movs	r2, #84	@ 0x54
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f005 fd72 	bl	800735a <memset>
* This function freeze the hardware resources used in this example
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a15      	ldr	r2, [pc, #84]	@ (80018d0 <HAL_RTC_MspInit+0x70>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d123      	bne.n	80018c8 <HAL_RTC_MspInit+0x68>
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */
 8001880:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001884:	60fb      	str	r3, [r7, #12]

 8001886:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800188a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* USER CODE END RTC_MspDeInit 0 */
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4618      	mov	r0, r3
 8001892:	f005 f9f7 	bl	8006c84 <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_RTC_MspInit+0x40>
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 800189c:	f7ff fe9a 	bl	80015d4 <Error_Handler>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <HAL_RTC_MspInit+0x74>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a6:	4a0b      	ldr	r2, [pc, #44]	@ (80018d4 <HAL_RTC_MspInit+0x74>)
 80018a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <HAL_RTC_MspInit+0x74>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b4:	4a07      	ldr	r2, [pc, #28]	@ (80018d4 <HAL_RTC_MspInit+0x74>)
 80018b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80018bc:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <HAL_RTC_MspInit+0x74>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]

/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
 80018c8:	bf00      	nop
 80018ca:	3760      	adds	r7, #96	@ 0x60
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40002800 	.word	0x40002800
 80018d4:	40021000 	.word	0x40021000

080018d8 <NMI_Handler>:

/******************************************************************************/
/*           Cortex-M4 Processor Interruption and Exception Handlers          */ 
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <NMI_Handler+0x4>

080018e0 <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:
}

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <MemManage_Handler+0x4>

080018f0 <BusFault_Handler>:
}

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:
}

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <UsageFault_Handler+0x4>

08001900 <SVC_Handler>:
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <EXTI2_IRQHandler>:
/******************************************************************************/

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
 800192a:	b580      	push	{r7, lr}
 800192c:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
 800192e:	2004      	movs	r0, #4
 8001930:	f002 ffac 	bl	800488c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <EXTI4_IRQHandler>:
}

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
 800193c:	2010      	movs	r0, #16
 800193e:	f002 ffa5 	bl	800488c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}

08001946 <EXTI9_5_IRQHandler>:
}

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
 8001946:	b580      	push	{r7, lr}
 8001948:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
 800194a:	2020      	movs	r0, #32
 800194c:	f002 ff9e 	bl	800488c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <EXTI15_10_IRQHandler>:
}

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
 8001958:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800195c:	f002 ff96 	bl	800488c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001960:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001964:	f002 ff92 	bl	800488c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <FMAC_IRQHandler>:
}

/**
  * @brief This function handles FMAC interrupt.
  */
void FMAC_IRQHandler(void)
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMAC_IRQn 0 */
  uint32_t tmp;

  /* Set GPO1 to high for timing purposes */
  LL_GPIO_SetOutputPin(GPO1_GPIO_Port, GPO1_Pin);

 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SystemInit>:
}

/**
  * @brief  Update SystemCoreClock variable according to Clock Register Values.
  *         The SystemCoreClock variable contains the core clock (HCLK), it can
  *         be used by the user application to setup the SysTick timer or configure
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  *         other parameters.
  *
  * @note   Each time the core clock (HCLK) changes, this function must be called
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  *         based on this variable will be incorrect.
  *
  * @note   - The system frequency computed by this function is not the real
  *           frequency in the chip. It is calculated based on the predefined
  *           constant and the selected clock source:
  *
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a0:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a4:	f7ff ffea 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	@ (80019dc <LoopForever+0x6>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	@ (80019e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <LoopForever+0xe>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	@ (80019ec <LoopForever+0x16>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ce:	f005 fccd 	bl	800736c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019d2:	f7ff f951 	bl	8000c78 <main>

080019d6 <LoopForever>:

LoopForever:
    b LoopForever
 80019d6:	e7fe      	b.n	80019d6 <LoopForever>
  ldr   r0, =_estack
 80019d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80019e4:	08007404 	.word	0x08007404
  ldr r2, =_sbss
 80019e8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80019ec:	20000500 	.word	0x20000500

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>

080019f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f001 fdf7 	bl	80035f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f80e 	bl	8001a24 <HAL_InitTick>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	71fb      	strb	r3, [r7, #7]
 8001a12:	e001      	b.n	8001a18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a14:	f7ff fde4 	bl	80015e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a18:	79fb      	ldrb	r3, [r7, #7]

}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a30:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <HAL_InitTick+0x68>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d022      	beq.n	8001a7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_InitTick+0x6c>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <HAL_InitTick+0x68>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 fe10 	bl	8003672 <HAL_SYSTICK_Config>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10f      	bne.n	8001a78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b0f      	cmp	r3, #15
 8001a5c:	d809      	bhi.n	8001a72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	f04f 30ff 	mov.w	r0, #4294967295
 8001a66:	f001 fdce 	bl	8003606 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <HAL_InitTick+0x70>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e007      	b.n	8001a82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e004      	b.n	8001a82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	e001      	b.n	8001a82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000001c 	.word	0x2000001c
 8001a90:	20000014 	.word	0x20000014
 8001a94:	20000018 	.word	0x20000018

08001a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <HAL_IncTick+0x1c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <HAL_IncTick+0x20>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a03      	ldr	r2, [pc, #12]	@ (8001ab4 <HAL_IncTick+0x1c>)
 8001aa8:	6013      	str	r3, [r2, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	200004fc 	.word	0x200004fc
 8001ab8:	2000001c 	.word	0x2000001c

08001abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	@ (8001ad0 <HAL_GetTick+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	200004fc 	.word	0x200004fc

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff ffee 	bl	8001abc <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d004      	beq.n	8001af8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_Delay+0x40>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001af8:	bf00      	nop
 8001afa:	f7ff ffdf 	bl	8001abc <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d8f7      	bhi.n	8001afa <HAL_Delay+0x26>
  {
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000001c 	.word	0x2000001c

08001b18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	609a      	str	r2, [r3, #8]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3360      	adds	r3, #96	@ 0x60
 8001b92:	461a      	mov	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <LL_ADC_SetOffset+0x44>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bb8:	bf00      	nop
 8001bba:	371c      	adds	r7, #28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	03fff000 	.word	0x03fff000

08001bc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3360      	adds	r3, #96	@ 0x60
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3360      	adds	r3, #96	@ 0x60
 8001c04:	461a      	mov	r2, r3
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c1e:	bf00      	nop
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b087      	sub	sp, #28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	3360      	adds	r3, #96	@ 0x60
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c54:	bf00      	nop
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3360      	adds	r3, #96	@ 0x60
 8001c70:	461a      	mov	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	431a      	orrs	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c8a:	bf00      	nop
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	615a      	str	r2, [r3, #20]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3330      	adds	r3, #48	@ 0x30
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	4413      	add	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	211f      	movs	r1, #31
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	401a      	ands	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	f003 011f 	and.w	r1, r3, #31
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	fa01 f303 	lsl.w	r3, r1, r3
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d2e:	bf00      	nop
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b087      	sub	sp, #28
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3314      	adds	r3, #20
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	0e5b      	lsrs	r3, r3, #25
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	4413      	add	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	0d1b      	lsrs	r3, r3, #20
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	2107      	movs	r1, #7
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	0d1b      	lsrs	r3, r3, #20
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da8:	43db      	mvns	r3, r3
 8001daa:	401a      	ands	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0318 	and.w	r3, r3, #24
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001db4:	40d9      	lsrs	r1, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	400b      	ands	r3, r1
 8001dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	0007ffff 	.word	0x0007ffff

08001dd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 031f 	and.w	r3, r3, #31
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6093      	str	r3, [r2, #8]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e2c:	d101      	bne.n	8001e32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e7c:	d101      	bne.n	8001e82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ea0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ec8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ecc:	f043 0202 	orr.w	r2, r3, #2
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <LL_ADC_IsEnabled+0x18>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <LL_ADC_IsEnabled+0x1a>
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d101      	bne.n	8001f1e <LL_ADC_IsDisableOngoing+0x18>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <LL_ADC_IsDisableOngoing+0x1a>
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f40:	f043 0204 	orr.w	r2, r3, #4
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d101      	bne.n	8001f6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d101      	bne.n	8001f92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b089      	sub	sp, #36	@ 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e1a9      	b.n	800230e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff fb2d 	bl	8001628 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff19 	bl	8001e18 <LL_ADC_IsDeepPowerDownEnabled>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff feff 	bl	8001df4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff ff34 	bl	8001e68 <LL_ADC_IsInternalRegulatorEnabled>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d115      	bne.n	8002032 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff18 	bl	8001e40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002010:	4b9c      	ldr	r3, [pc, #624]	@ (8002284 <HAL_ADC_Init+0x2e4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	4a9c      	ldr	r2, [pc, #624]	@ (8002288 <HAL_ADC_Init+0x2e8>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	099b      	lsrs	r3, r3, #6
 800201e:	3301      	adds	r3, #1
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002024:	e002      	b.n	800202c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3b01      	subs	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f9      	bne.n	8002026 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff16 	bl	8001e68 <LL_ADC_IsInternalRegulatorEnabled>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10d      	bne.n	800205e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002046:	f043 0210 	orr.w	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff76 	bl	8001f54 <LL_ADC_REG_IsConversionOngoing>
 8002068:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 8142 	bne.w	80022fc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 813e 	bne.w	80022fc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002084:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002088:	f043 0202 	orr.w	r2, r3, #2
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff23 	bl	8001ee0 <LL_ADC_IsEnabled>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d141      	bne.n	8002124 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020a8:	d004      	beq.n	80020b4 <HAL_ADC_Init+0x114>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a77      	ldr	r2, [pc, #476]	@ (800228c <HAL_ADC_Init+0x2ec>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d10f      	bne.n	80020d4 <HAL_ADC_Init+0x134>
 80020b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020b8:	f7ff ff12 	bl	8001ee0 <LL_ADC_IsEnabled>
 80020bc:	4604      	mov	r4, r0
 80020be:	4873      	ldr	r0, [pc, #460]	@ (800228c <HAL_ADC_Init+0x2ec>)
 80020c0:	f7ff ff0e 	bl	8001ee0 <LL_ADC_IsEnabled>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4323      	orrs	r3, r4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	e012      	b.n	80020fa <HAL_ADC_Init+0x15a>
 80020d4:	486e      	ldr	r0, [pc, #440]	@ (8002290 <HAL_ADC_Init+0x2f0>)
 80020d6:	f7ff ff03 	bl	8001ee0 <LL_ADC_IsEnabled>
 80020da:	4604      	mov	r4, r0
 80020dc:	486d      	ldr	r0, [pc, #436]	@ (8002294 <HAL_ADC_Init+0x2f4>)
 80020de:	f7ff feff 	bl	8001ee0 <LL_ADC_IsEnabled>
 80020e2:	4603      	mov	r3, r0
 80020e4:	431c      	orrs	r4, r3
 80020e6:	486c      	ldr	r0, [pc, #432]	@ (8002298 <HAL_ADC_Init+0x2f8>)
 80020e8:	f7ff fefa 	bl	8001ee0 <LL_ADC_IsEnabled>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4323      	orrs	r3, r4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d012      	beq.n	8002124 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002106:	d004      	beq.n	8002112 <HAL_ADC_Init+0x172>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a5f      	ldr	r2, [pc, #380]	@ (800228c <HAL_ADC_Init+0x2ec>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <HAL_ADC_Init+0x176>
 8002112:	4a62      	ldr	r2, [pc, #392]	@ (800229c <HAL_ADC_Init+0x2fc>)
 8002114:	e000      	b.n	8002118 <HAL_ADC_Init+0x178>
 8002116:	4a62      	ldr	r2, [pc, #392]	@ (80022a0 <HAL_ADC_Init+0x300>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4619      	mov	r1, r3
 800211e:	4610      	mov	r0, r2
 8002120:	f7ff fcfa 	bl	8001b18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7f5b      	ldrb	r3, [r3, #29]
 8002128:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800212e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002134:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800213a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002142:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800214e:	2b01      	cmp	r3, #1
 8002150:	d106      	bne.n	8002160 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002156:	3b01      	subs	r3, #1
 8002158:	045b      	lsls	r3, r3, #17
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d009      	beq.n	800217c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002174:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	4b48      	ldr	r3, [pc, #288]	@ (80022a4 <HAL_ADC_Init+0x304>)
 8002184:	4013      	ands	r3, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	69b9      	ldr	r1, [r7, #24]
 800218c:	430b      	orrs	r3, r1
 800218e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fee5 	bl	8001f7a <LL_ADC_INJ_IsConversionOngoing>
 80021b0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d17f      	bne.n	80022b8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d17c      	bne.n	80022b8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021c2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021ca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021da:	f023 0302 	bic.w	r3, r3, #2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	430b      	orrs	r3, r1
 80021e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d017      	beq.n	8002220 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002208:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800220c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6911      	ldr	r1, [r2, #16]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	430b      	orrs	r3, r1
 800221a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800221e:	e013      	b.n	8002248 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800222e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002240:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002244:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800224e:	2b01      	cmp	r3, #1
 8002250:	d12a      	bne.n	80022a8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800225c:	f023 0304 	bic.w	r3, r3, #4
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002268:	4311      	orrs	r1, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800226e:	4311      	orrs	r1, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002274:	430a      	orrs	r2, r1
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0201 	orr.w	r2, r2, #1
 8002280:	611a      	str	r2, [r3, #16]
 8002282:	e019      	b.n	80022b8 <HAL_ADC_Init+0x318>
 8002284:	20000014 	.word	0x20000014
 8002288:	053e2d63 	.word	0x053e2d63
 800228c:	50000100 	.word	0x50000100
 8002290:	50000400 	.word	0x50000400
 8002294:	50000500 	.word	0x50000500
 8002298:	50000600 	.word	0x50000600
 800229c:	50000300 	.word	0x50000300
 80022a0:	50000700 	.word	0x50000700
 80022a4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d10c      	bne.n	80022da <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f023 010f 	bic.w	r1, r3, #15
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80022d8:	e007      	b.n	80022ea <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 020f 	bic.w	r2, r2, #15
 80022e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	f043 0201 	orr.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022fa:	e007      	b.n	800230c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	f043 0210 	orr.w	r2, r3, #16
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800230c:	7ffb      	ldrb	r3, [r7, #31]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	@ 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd90      	pop	{r4, r7, pc}
 8002316:	bf00      	nop

08002318 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800232c:	d004      	beq.n	8002338 <HAL_ADC_Start_DMA+0x20>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a5a      	ldr	r2, [pc, #360]	@ (800249c <HAL_ADC_Start_DMA+0x184>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d101      	bne.n	800233c <HAL_ADC_Start_DMA+0x24>
 8002338:	4b59      	ldr	r3, [pc, #356]	@ (80024a0 <HAL_ADC_Start_DMA+0x188>)
 800233a:	e000      	b.n	800233e <HAL_ADC_Start_DMA+0x26>
 800233c:	4b59      	ldr	r3, [pc, #356]	@ (80024a4 <HAL_ADC_Start_DMA+0x18c>)
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fd4a 	bl	8001dd8 <LL_ADC_GetMultimode>
 8002344:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fe02 	bl	8001f54 <LL_ADC_REG_IsConversionOngoing>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	f040 809b 	bne.w	800248e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_ADC_Start_DMA+0x4e>
 8002362:	2302      	movs	r3, #2
 8002364:	e096      	b.n	8002494 <HAL_ADC_Start_DMA+0x17c>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a4d      	ldr	r2, [pc, #308]	@ (80024a8 <HAL_ADC_Start_DMA+0x190>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d008      	beq.n	800238a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b05      	cmp	r3, #5
 8002382:	d002      	beq.n	800238a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b09      	cmp	r3, #9
 8002388:	d17a      	bne.n	8002480 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fcf6 	bl	8002d7c <ADC_Enable>
 8002390:	4603      	mov	r3, r0
 8002392:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d16d      	bne.n	8002476 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a3a      	ldr	r2, [pc, #232]	@ (800249c <HAL_ADC_Start_DMA+0x184>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_ADC_Start_DMA+0xb4>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a3b      	ldr	r2, [pc, #236]	@ (80024ac <HAL_ADC_Start_DMA+0x194>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d002      	beq.n	80023c8 <HAL_ADC_Start_DMA+0xb0>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	e003      	b.n	80023d0 <HAL_ADC_Start_DMA+0xb8>
 80023c8:	4b39      	ldr	r3, [pc, #228]	@ (80024b0 <HAL_ADC_Start_DMA+0x198>)
 80023ca:	e001      	b.n	80023d0 <HAL_ADC_Start_DMA+0xb8>
 80023cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d002      	beq.n	80023de <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023fa:	f023 0206 	bic.w	r2, r3, #6
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	661a      	str	r2, [r3, #96]	@ 0x60
 8002402:	e002      	b.n	800240a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240e:	4a29      	ldr	r2, [pc, #164]	@ (80024b4 <HAL_ADC_Start_DMA+0x19c>)
 8002410:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002416:	4a28      	ldr	r2, [pc, #160]	@ (80024b8 <HAL_ADC_Start_DMA+0x1a0>)
 8002418:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241e:	4a27      	ldr	r2, [pc, #156]	@ (80024bc <HAL_ADC_Start_DMA+0x1a4>)
 8002420:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	221c      	movs	r2, #28
 8002428:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0210 	orr.w	r2, r2, #16
 8002440:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3340      	adds	r3, #64	@ 0x40
 800245c:	4619      	mov	r1, r3
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f001 f9bb 	bl	80037dc <HAL_DMA_Start_IT>
 8002466:	4603      	mov	r3, r0
 8002468:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fd5c 	bl	8001f2c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002474:	e00d      	b.n	8002492 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800247e:	e008      	b.n	8002492 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800248c:	e001      	b.n	8002492 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800248e:	2302      	movs	r3, #2
 8002490:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002492:	7dfb      	ldrb	r3, [r7, #23]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	50000100 	.word	0x50000100
 80024a0:	50000300 	.word	0x50000300
 80024a4:	50000700 	.word	0x50000700
 80024a8:	50000600 	.word	0x50000600
 80024ac:	50000500 	.word	0x50000500
 80024b0:	50000400 	.word	0x50000400
 80024b4:	08002f67 	.word	0x08002f67
 80024b8:	0800303f 	.word	0x0800303f
 80024bc:	0800305b 	.word	0x0800305b

080024c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b0b6      	sub	sp, #216	@ 0xd8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002516:	2b01      	cmp	r3, #1
 8002518:	d102      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x24>
 800251a:	2302      	movs	r3, #2
 800251c:	f000 bc13 	b.w	8002d46 <HAL_ADC_ConfigChannel+0x84a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fd11 	bl	8001f54 <LL_ADC_REG_IsConversionOngoing>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f040 83f3 	bne.w	8002d20 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	f7ff fbcb 	bl	8001ce2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fcff 	bl	8001f54 <LL_ADC_REG_IsConversionOngoing>
 8002556:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fd0b 	bl	8001f7a <LL_ADC_INJ_IsConversionOngoing>
 8002564:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002568:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800256c:	2b00      	cmp	r3, #0
 800256e:	f040 81d9 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002572:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 81d4 	bne.w	8002924 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002584:	d10f      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	4619      	mov	r1, r3
 8002592:	f7ff fbd2 	bl	8001d3a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fb79 	bl	8001c96 <LL_ADC_SetSamplingTimeCommonConfig>
 80025a4:	e00e      	b.n	80025c4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	461a      	mov	r2, r3
 80025b4:	f7ff fbc1 	bl	8001d3a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fb69 	bl	8001c96 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	695a      	ldr	r2, [r3, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	08db      	lsrs	r3, r3, #3
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d022      	beq.n	800262c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6919      	ldr	r1, [r3, #16]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025f6:	f7ff fac3 	bl	8001b80 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6919      	ldr	r1, [r3, #16]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	461a      	mov	r2, r3
 8002608:	f7ff fb0f 	bl	8001c2a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002618:	2b01      	cmp	r3, #1
 800261a:	d102      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x126>
 800261c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002620:	e000      	b.n	8002624 <HAL_ADC_ConfigChannel+0x128>
 8002622:	2300      	movs	r3, #0
 8002624:	461a      	mov	r2, r3
 8002626:	f7ff fb1b 	bl	8001c60 <LL_ADC_SetOffsetSaturation>
 800262a:	e17b      	b.n	8002924 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fac8 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10a      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x15c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fabd 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 800264e:	4603      	mov	r3, r0
 8002650:	0e9b      	lsrs	r3, r3, #26
 8002652:	f003 021f 	and.w	r2, r3, #31
 8002656:	e01e      	b.n	8002696 <HAL_ADC_ConfigChannel+0x19a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fab2 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800267a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800267e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002686:	2320      	movs	r3, #32
 8002688:	e004      	b.n	8002694 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800268a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x1b2>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0e9b      	lsrs	r3, r3, #26
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	e018      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x1e4>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80026c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80026ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80026d2:	2320      	movs	r3, #32
 80026d4:	e004      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80026d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d106      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2200      	movs	r2, #0
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fa81 	bl	8001bf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2101      	movs	r1, #1
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fa65 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <HAL_ADC_ConfigChannel+0x222>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2101      	movs	r1, #1
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fa5a 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	0e9b      	lsrs	r3, r3, #26
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	e01e      	b.n	800275c <HAL_ADC_ConfigChannel+0x260>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2101      	movs	r1, #1
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fa4f 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 800272a:	4603      	mov	r3, r0
 800272c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800273c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002740:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002744:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800274c:	2320      	movs	r3, #32
 800274e:	e004      	b.n	800275a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002750:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x278>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0e9b      	lsrs	r3, r3, #26
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	e018      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x2aa>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002788:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800278c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002790:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002798:	2320      	movs	r3, #32
 800279a:	e004      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800279c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	2101      	movs	r1, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fa1e 	bl	8001bf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2102      	movs	r1, #2
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fa02 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x2e8>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2102      	movs	r1, #2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff f9f7 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 80027da:	4603      	mov	r3, r0
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	f003 021f 	and.w	r2, r3, #31
 80027e2:	e01e      	b.n	8002822 <HAL_ADC_ConfigChannel+0x326>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2102      	movs	r1, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff f9ec 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002802:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800280a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e004      	b.n	8002820 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002816:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <HAL_ADC_ConfigChannel+0x33e>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	0e9b      	lsrs	r3, r3, #26
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	e016      	b.n	8002868 <HAL_ADC_ConfigChannel+0x36c>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800284c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800284e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002852:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800285a:	2320      	movs	r3, #32
 800285c:	e004      	b.n	8002868 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800285e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002868:	429a      	cmp	r2, r3
 800286a:	d106      	bne.n	800287a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2200      	movs	r2, #0
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff f9bd 	bl	8001bf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2103      	movs	r1, #3
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff f9a1 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 8002886:	4603      	mov	r3, r0
 8002888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x3aa>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2103      	movs	r1, #3
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f996 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 800289c:	4603      	mov	r3, r0
 800289e:	0e9b      	lsrs	r3, r3, #26
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	e017      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x3da>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2103      	movs	r1, #3
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff f98b 	bl	8001bc8 <LL_ADC_GetOffsetChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80028be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028c0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80028c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80028c8:	2320      	movs	r3, #32
 80028ca:	e003      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80028cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x3f2>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	0e9b      	lsrs	r3, r3, #26
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	e011      	b.n	8002912 <HAL_ADC_ConfigChannel+0x416>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80028fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002906:	2320      	movs	r3, #32
 8002908:	e003      	b.n	8002912 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800290a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002912:	429a      	cmp	r2, r3
 8002914:	d106      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	2103      	movs	r1, #3
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f968 	bl	8001bf4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fad9 	bl	8001ee0 <LL_ADC_IsEnabled>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 813d 	bne.w	8002bb0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6819      	ldr	r1, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	461a      	mov	r2, r3
 8002944:	f7ff fa24 	bl	8001d90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4aa2      	ldr	r2, [pc, #648]	@ (8002bd8 <HAL_ADC_ConfigChannel+0x6dc>)
 800294e:	4293      	cmp	r3, r2
 8002950:	f040 812e 	bne.w	8002bb0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_ADC_ConfigChannel+0x480>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	3301      	adds	r3, #1
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	2b09      	cmp	r3, #9
 8002972:	bf94      	ite	ls
 8002974:	2301      	movls	r3, #1
 8002976:	2300      	movhi	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	e019      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x4b4>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002984:	fa93 f3a3 	rbit	r3, r3
 8002988:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800298a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800298c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800298e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002994:	2320      	movs	r3, #32
 8002996:	e003      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002998:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	2b09      	cmp	r3, #9
 80029a8:	bf94      	ite	ls
 80029aa:	2301      	movls	r3, #1
 80029ac:	2300      	movhi	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d079      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x4d4>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	3301      	adds	r3, #1
 80029c8:	069b      	lsls	r3, r3, #26
 80029ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029ce:	e015      	b.n	80029fc <HAL_ADC_ConfigChannel+0x500>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029d8:	fa93 f3a3 	rbit	r3, r3
 80029dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80029de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80029e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80029e8:	2320      	movs	r3, #32
 80029ea:	e003      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80029ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	069b      	lsls	r3, r3, #26
 80029f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x520>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	3301      	adds	r3, #1
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	e017      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x550>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002a38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2101      	movs	r1, #1
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	ea42 0103 	orr.w	r1, r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x576>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0e9b      	lsrs	r3, r3, #26
 8002a62:	3301      	adds	r3, #1
 8002a64:	f003 021f 	and.w	r2, r3, #31
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	051b      	lsls	r3, r3, #20
 8002a70:	e018      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x5a8>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	e003      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	e07e      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x5c8>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	069b      	lsls	r3, r3, #26
 8002abe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ac2:	e015      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x5f4>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002adc:	2320      	movs	r3, #32
 8002ade:	e003      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	069b      	lsls	r3, r3, #26
 8002aec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x614>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	2101      	movs	r1, #1
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	e017      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x644>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	61fb      	str	r3, [r7, #28]
  return result;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002b28:	2320      	movs	r3, #32
 8002b2a:	e003      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	3301      	adds	r3, #1
 8002b36:	f003 031f 	and.w	r3, r3, #31
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	ea42 0103 	orr.w	r1, r2, r3
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10d      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x670>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0e9b      	lsrs	r3, r3, #26
 8002b56:	3301      	adds	r3, #1
 8002b58:	f003 021f 	and.w	r2, r3, #31
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	3b1e      	subs	r3, #30
 8002b64:	051b      	lsls	r3, r3, #20
 8002b66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b6a:	e01b      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x6a8>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	613b      	str	r3, [r7, #16]
  return result;
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e003      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 021f 	and.w	r2, r3, #31
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b1e      	subs	r3, #30
 8002b9e:	051b      	lsls	r3, r3, #20
 8002ba0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002baa:	4619      	mov	r1, r3
 8002bac:	f7ff f8c5 	bl	8001d3a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_ADC_ConfigChannel+0x6e0>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80be 	beq.w	8002d3a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bc6:	d004      	beq.n	8002bd2 <HAL_ADC_ConfigChannel+0x6d6>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a04      	ldr	r2, [pc, #16]	@ (8002be0 <HAL_ADC_ConfigChannel+0x6e4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d10a      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x6ec>
 8002bd2:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002bd4:	e009      	b.n	8002bea <HAL_ADC_ConfigChannel+0x6ee>
 8002bd6:	bf00      	nop
 8002bd8:	407f0000 	.word	0x407f0000
 8002bdc:	80080000 	.word	0x80080000
 8002be0:	50000100 	.word	0x50000100
 8002be4:	50000300 	.word	0x50000300
 8002be8:	4b59      	ldr	r3, [pc, #356]	@ (8002d50 <HAL_ADC_ConfigChannel+0x854>)
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe ffba 	bl	8001b64 <LL_ADC_GetCommonPathInternalCh>
 8002bf0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a56      	ldr	r2, [pc, #344]	@ (8002d54 <HAL_ADC_ConfigChannel+0x858>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <HAL_ADC_ConfigChannel+0x70c>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a55      	ldr	r2, [pc, #340]	@ (8002d58 <HAL_ADC_ConfigChannel+0x85c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d13a      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d134      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c1c:	d005      	beq.n	8002c2a <HAL_ADC_ConfigChannel+0x72e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a4e      	ldr	r2, [pc, #312]	@ (8002d5c <HAL_ADC_ConfigChannel+0x860>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	f040 8085 	bne.w	8002d34 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c32:	d004      	beq.n	8002c3e <HAL_ADC_ConfigChannel+0x742>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a49      	ldr	r2, [pc, #292]	@ (8002d60 <HAL_ADC_ConfigChannel+0x864>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x746>
 8002c3e:	4a49      	ldr	r2, [pc, #292]	@ (8002d64 <HAL_ADC_ConfigChannel+0x868>)
 8002c40:	e000      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x748>
 8002c42:	4a43      	ldr	r2, [pc, #268]	@ (8002d50 <HAL_ADC_ConfigChannel+0x854>)
 8002c44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f7fe ff75 	bl	8001b3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c54:	4b44      	ldr	r3, [pc, #272]	@ (8002d68 <HAL_ADC_ConfigChannel+0x86c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	099b      	lsrs	r3, r3, #6
 8002c5a:	4a44      	ldr	r2, [pc, #272]	@ (8002d6c <HAL_ADC_ConfigChannel+0x870>)
 8002c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c60:	099b      	lsrs	r3, r3, #6
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c6e:	e002      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f9      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c7c:	e05a      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a3b      	ldr	r2, [pc, #236]	@ (8002d70 <HAL_ADC_ConfigChannel+0x874>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d125      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d11f      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a31      	ldr	r2, [pc, #196]	@ (8002d60 <HAL_ADC_ConfigChannel+0x864>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d104      	bne.n	8002ca8 <HAL_ADC_ConfigChannel+0x7ac>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a34      	ldr	r2, [pc, #208]	@ (8002d74 <HAL_ADC_ConfigChannel+0x878>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d047      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cb0:	d004      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0x7c0>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8002d60 <HAL_ADC_ConfigChannel+0x864>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x7c4>
 8002cbc:	4a29      	ldr	r2, [pc, #164]	@ (8002d64 <HAL_ADC_ConfigChannel+0x868>)
 8002cbe:	e000      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x7c6>
 8002cc0:	4a23      	ldr	r2, [pc, #140]	@ (8002d50 <HAL_ADC_ConfigChannel+0x854>)
 8002cc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f7fe ff36 	bl	8001b3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cd2:	e031      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a27      	ldr	r2, [pc, #156]	@ (8002d78 <HAL_ADC_ConfigChannel+0x87c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d12d      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d127      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1c      	ldr	r2, [pc, #112]	@ (8002d60 <HAL_ADC_ConfigChannel+0x864>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d022      	beq.n	8002d3a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cfc:	d004      	beq.n	8002d08 <HAL_ADC_ConfigChannel+0x80c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a17      	ldr	r2, [pc, #92]	@ (8002d60 <HAL_ADC_ConfigChannel+0x864>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x810>
 8002d08:	4a16      	ldr	r2, [pc, #88]	@ (8002d64 <HAL_ADC_ConfigChannel+0x868>)
 8002d0a:	e000      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x812>
 8002d0c:	4a10      	ldr	r2, [pc, #64]	@ (8002d50 <HAL_ADC_ConfigChannel+0x854>)
 8002d0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f7fe ff10 	bl	8001b3e <LL_ADC_SetCommonPathInternalCh>
 8002d1e:	e00c      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002d32:	e002      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d34:	bf00      	nop
 8002d36:	e000      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d42:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	37d8      	adds	r7, #216	@ 0xd8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	50000700 	.word	0x50000700
 8002d54:	c3210000 	.word	0xc3210000
 8002d58:	90c00010 	.word	0x90c00010
 8002d5c:	50000600 	.word	0x50000600
 8002d60:	50000100 	.word	0x50000100
 8002d64:	50000300 	.word	0x50000300
 8002d68:	20000014 	.word	0x20000014
 8002d6c:	053e2d63 	.word	0x053e2d63
 8002d70:	c7520000 	.word	0xc7520000
 8002d74:	50000500 	.word	0x50000500
 8002d78:	cb840000 	.word	0xcb840000

08002d7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff f8a7 	bl	8001ee0 <LL_ADC_IsEnabled>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d176      	bne.n	8002e86 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e90 <ADC_Enable+0x114>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	f043 0210 	orr.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e062      	b.n	8002e88 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f862 	bl	8001e90 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dd4:	d004      	beq.n	8002de0 <ADC_Enable+0x64>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a2e      	ldr	r2, [pc, #184]	@ (8002e94 <ADC_Enable+0x118>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d101      	bne.n	8002de4 <ADC_Enable+0x68>
 8002de0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e98 <ADC_Enable+0x11c>)
 8002de2:	e000      	b.n	8002de6 <ADC_Enable+0x6a>
 8002de4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <ADC_Enable+0x120>)
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe febc 	bl	8001b64 <LL_ADC_GetCommonPathInternalCh>
 8002dec:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d013      	beq.n	8002e1e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea0 <ADC_Enable+0x124>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	4a29      	ldr	r2, [pc, #164]	@ (8002ea4 <ADC_Enable+0x128>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	099b      	lsrs	r3, r3, #6
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e10:	e002      	b.n	8002e18 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f9      	bne.n	8002e12 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e1e:	f7fe fe4d 	bl	8001abc <HAL_GetTick>
 8002e22:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e24:	e028      	b.n	8002e78 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f858 	bl	8001ee0 <LL_ADC_IsEnabled>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d104      	bne.n	8002e40 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff f828 	bl	8001e90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e40:	f7fe fe3c 	bl	8001abc <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d914      	bls.n	8002e78 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d00d      	beq.n	8002e78 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	f043 0210 	orr.w	r2, r3, #16
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e007      	b.n	8002e88 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d1cf      	bne.n	8002e26 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	8000003f 	.word	0x8000003f
 8002e94:	50000100 	.word	0x50000100
 8002e98:	50000300 	.word	0x50000300
 8002e9c:	50000700 	.word	0x50000700
 8002ea0:	20000014 	.word	0x20000014
 8002ea4:	053e2d63 	.word	0x053e2d63

08002ea8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff f826 	bl	8001f06 <LL_ADC_IsDisableOngoing>
 8002eba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff f80d 	bl	8001ee0 <LL_ADC_IsEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d047      	beq.n	8002f5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d144      	bne.n	8002f5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030d 	and.w	r3, r3, #13
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d10c      	bne.n	8002efa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe ffe7 	bl	8001eb8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ef2:	f7fe fde3 	bl	8001abc <HAL_GetTick>
 8002ef6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ef8:	e029      	b.n	8002f4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efe:	f043 0210 	orr.w	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0a:	f043 0201 	orr.w	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e023      	b.n	8002f5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f16:	f7fe fdd1 	bl	8001abc <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d914      	bls.n	8002f4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00d      	beq.n	8002f4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	f043 0210 	orr.w	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f42:	f043 0201 	orr.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e007      	b.n	8002f5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1dc      	bne.n	8002f16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d14b      	bne.n	8003018 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d021      	beq.n	8002fde <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe fe8c 	bl	8001cbc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d032      	beq.n	8003010 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d12b      	bne.n	8003010 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d11f      	bne.n	8003010 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	f043 0201 	orr.w	r2, r3, #1
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fdc:	e018      	b.n	8003010 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d111      	bne.n	8003010 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f7ff fa55 	bl	80024c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003016:	e00e      	b.n	8003036 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7ff fa5f 	bl	80024e8 <HAL_ADC_ErrorCallback>
}
 800302a:	e004      	b.n	8003036 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
}
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b084      	sub	sp, #16
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff fa41 	bl	80024d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003078:	f043 0204 	orr.w	r2, r3, #4
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff fa31 	bl	80024e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <LL_ADC_IsEnabled>:
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <LL_ADC_IsEnabled+0x18>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <LL_ADC_IsEnabled+0x1a>
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_ADC_StartCalibration>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80030c6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	609a      	str	r2, [r3, #8]
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <LL_ADC_IsCalibrationOnGoing>:
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030fa:	d101      	bne.n	8003100 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <LL_ADC_REG_IsConversionOngoing>:
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b04      	cmp	r3, #4
 8003120:	d101      	bne.n	8003126 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800313e:	2300      	movs	r3, #0
 8003140:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_ADCEx_Calibration_Start+0x1c>
 800314c:	2302      	movs	r3, #2
 800314e:	e04d      	b.n	80031ec <HAL_ADCEx_Calibration_Start+0xb8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff fea5 	bl	8002ea8 <ADC_Disable>
 800315e:	4603      	mov	r3, r0
 8003160:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d136      	bne.n	80031d6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003170:	f023 0302 	bic.w	r3, r3, #2
 8003174:	f043 0202 	orr.w	r2, r3, #2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6839      	ldr	r1, [r7, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff96 	bl	80030b4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003188:	e014      	b.n	80031b4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	3301      	adds	r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4a18      	ldr	r2, [pc, #96]	@ (80031f4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d90d      	bls.n	80031b4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319c:	f023 0312 	bic.w	r3, r3, #18
 80031a0:	f043 0210 	orr.w	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e01b      	b.n	80031ec <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff94 	bl	80030e6 <LL_ADC_IsCalibrationOnGoing>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e2      	bne.n	800318a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c8:	f023 0303 	bic.w	r3, r3, #3
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031d4:	e005      	b.n	80031e2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031da:	f043 0210 	orr.w	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	0004de01 	.word	0x0004de01

080031f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b0a1      	sub	sp, #132	@ 0x84
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003212:	2302      	movs	r3, #2
 8003214:	e0e7      	b.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800321e:	2300      	movs	r3, #0
 8003220:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003222:	2300      	movs	r3, #0
 8003224:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800322e:	d102      	bne.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003230:	4b6f      	ldr	r3, [pc, #444]	@ (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	e009      	b.n	800324a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6e      	ldr	r2, [pc, #440]	@ (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d102      	bne.n	8003246 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003240:	4b6d      	ldr	r3, [pc, #436]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	e001      	b.n	800324a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003254:	f043 0220 	orr.w	r2, r3, #32
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0be      	b.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ff4f 	bl	800310e <LL_ADC_REG_IsConversionOngoing>
 8003270:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ff49 	bl	800310e <LL_ADC_REG_IsConversionOngoing>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 80a0 	bne.w	80033c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 809c 	bne.w	80033c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003294:	d004      	beq.n	80032a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a55      	ldr	r2, [pc, #340]	@ (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d101      	bne.n	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80032a0:	4b56      	ldr	r3, [pc, #344]	@ (80033fc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80032a2:	e000      	b.n	80032a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80032a4:	4b56      	ldr	r3, [pc, #344]	@ (8003400 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80032a6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d04b      	beq.n	8003348 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032c2:	035b      	lsls	r3, r3, #13
 80032c4:	430b      	orrs	r3, r1
 80032c6:	431a      	orrs	r2, r3
 80032c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032d4:	d004      	beq.n	80032e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a45      	ldr	r2, [pc, #276]	@ (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d10f      	bne.n	8003300 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80032e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80032e4:	f7ff fed3 	bl	800308e <LL_ADC_IsEnabled>
 80032e8:	4604      	mov	r4, r0
 80032ea:	4841      	ldr	r0, [pc, #260]	@ (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032ec:	f7ff fecf 	bl	800308e <LL_ADC_IsEnabled>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4323      	orrs	r3, r4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e012      	b.n	8003326 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003300:	483c      	ldr	r0, [pc, #240]	@ (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003302:	f7ff fec4 	bl	800308e <LL_ADC_IsEnabled>
 8003306:	4604      	mov	r4, r0
 8003308:	483b      	ldr	r0, [pc, #236]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800330a:	f7ff fec0 	bl	800308e <LL_ADC_IsEnabled>
 800330e:	4603      	mov	r3, r0
 8003310:	431c      	orrs	r4, r3
 8003312:	483c      	ldr	r0, [pc, #240]	@ (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003314:	f7ff febb 	bl	800308e <LL_ADC_IsEnabled>
 8003318:	4603      	mov	r3, r0
 800331a:	4323      	orrs	r3, r4
 800331c:	2b00      	cmp	r3, #0
 800331e:	bf0c      	ite	eq
 8003320:	2301      	moveq	r3, #1
 8003322:	2300      	movne	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d056      	beq.n	80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800332a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003332:	f023 030f 	bic.w	r3, r3, #15
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	6811      	ldr	r1, [r2, #0]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	6892      	ldr	r2, [r2, #8]
 800333e:	430a      	orrs	r2, r1
 8003340:	431a      	orrs	r2, r3
 8003342:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003344:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003346:	e047      	b.n	80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003348:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003350:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003352:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800335c:	d004      	beq.n	8003368 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a23      	ldr	r2, [pc, #140]	@ (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d10f      	bne.n	8003388 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003368:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800336c:	f7ff fe8f 	bl	800308e <LL_ADC_IsEnabled>
 8003370:	4604      	mov	r4, r0
 8003372:	481f      	ldr	r0, [pc, #124]	@ (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003374:	f7ff fe8b 	bl	800308e <LL_ADC_IsEnabled>
 8003378:	4603      	mov	r3, r0
 800337a:	4323      	orrs	r3, r4
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf0c      	ite	eq
 8003380:	2301      	moveq	r3, #1
 8003382:	2300      	movne	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	e012      	b.n	80033ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003388:	481a      	ldr	r0, [pc, #104]	@ (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800338a:	f7ff fe80 	bl	800308e <LL_ADC_IsEnabled>
 800338e:	4604      	mov	r4, r0
 8003390:	4819      	ldr	r0, [pc, #100]	@ (80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003392:	f7ff fe7c 	bl	800308e <LL_ADC_IsEnabled>
 8003396:	4603      	mov	r3, r0
 8003398:	431c      	orrs	r4, r3
 800339a:	481a      	ldr	r0, [pc, #104]	@ (8003404 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800339c:	f7ff fe77 	bl	800308e <LL_ADC_IsEnabled>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4323      	orrs	r3, r4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d012      	beq.n	80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033ba:	f023 030f 	bic.w	r3, r3, #15
 80033be:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80033c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033c2:	e009      	b.n	80033d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c8:	f043 0220 	orr.w	r2, r3, #32
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80033d6:	e000      	b.n	80033da <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80033e2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3784      	adds	r7, #132	@ 0x84
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd90      	pop	{r4, r7, pc}
 80033ee:	bf00      	nop
 80033f0:	50000100 	.word	0x50000100
 80033f4:	50000400 	.word	0x50000400
 80033f8:	50000500 	.word	0x50000500
 80033fc:	50000300 	.word	0x50000300
 8003400:	50000700 	.word	0x50000700
 8003404:	50000600 	.word	0x50000600

08003408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003418:	4b0c      	ldr	r3, [pc, #48]	@ (800344c <__NVIC_SetPriorityGrouping+0x44>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003424:	4013      	ands	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800343a:	4a04      	ldr	r2, [pc, #16]	@ (800344c <__NVIC_SetPriorityGrouping+0x44>)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	60d3      	str	r3, [r2, #12]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003454:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <__NVIC_GetPriorityGrouping+0x18>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	f003 0307 	and.w	r3, r3, #7
}
 800345e:	4618      	mov	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	2b00      	cmp	r3, #0
 800347c:	db0b      	blt.n	8003496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	4907      	ldr	r1, [pc, #28]	@ (80034a4 <__NVIC_EnableIRQ+0x38>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2001      	movs	r0, #1
 800348e:	fa00 f202 	lsl.w	r2, r0, r2
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000e100 	.word	0xe000e100

080034a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	db12      	blt.n	80034e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	f003 021f 	and.w	r2, r3, #31
 80034c0:	490a      	ldr	r1, [pc, #40]	@ (80034ec <__NVIC_DisableIRQ+0x44>)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	2001      	movs	r0, #1
 80034ca:	fa00 f202 	lsl.w	r2, r0, r2
 80034ce:	3320      	adds	r3, #32
 80034d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80034d4:	f3bf 8f4f 	dsb	sy
}
 80034d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034da:	f3bf 8f6f 	isb	sy
}
 80034de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000e100 	.word	0xe000e100

080034f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	db0a      	blt.n	800351a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	490c      	ldr	r1, [pc, #48]	@ (800353c <__NVIC_SetPriority+0x4c>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	440b      	add	r3, r1
 8003514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003518:	e00a      	b.n	8003530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4908      	ldr	r1, [pc, #32]	@ (8003540 <__NVIC_SetPriority+0x50>)
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3b04      	subs	r3, #4
 8003528:	0112      	lsls	r2, r2, #4
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	440b      	add	r3, r1
 800352e:	761a      	strb	r2, [r3, #24]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000e100 	.word	0xe000e100
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	@ 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f1c3 0307 	rsb	r3, r3, #7
 800355e:	2b04      	cmp	r3, #4
 8003560:	bf28      	it	cs
 8003562:	2304      	movcs	r3, #4
 8003564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3304      	adds	r3, #4
 800356a:	2b06      	cmp	r3, #6
 800356c:	d902      	bls.n	8003574 <NVIC_EncodePriority+0x30>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3b03      	subs	r3, #3
 8003572:	e000      	b.n	8003576 <NVIC_EncodePriority+0x32>
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	f04f 32ff 	mov.w	r2, #4294967295
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	401a      	ands	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	43d9      	mvns	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	4313      	orrs	r3, r2
         );
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3724      	adds	r7, #36	@ 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035bc:	d301      	bcc.n	80035c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035be:	2301      	movs	r3, #1
 80035c0:	e00f      	b.n	80035e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035c2:	4a0a      	ldr	r2, [pc, #40]	@ (80035ec <SysTick_Config+0x40>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ca:	210f      	movs	r1, #15
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	f7ff ff8e 	bl	80034f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d4:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <SysTick_Config+0x40>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035da:	4b04      	ldr	r3, [pc, #16]	@ (80035ec <SysTick_Config+0x40>)
 80035dc:	2207      	movs	r2, #7
 80035de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	e000e010 	.word	0xe000e010

080035f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff05 	bl	8003408 <__NVIC_SetPriorityGrouping>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b086      	sub	sp, #24
 800360a:	af00      	add	r7, sp, #0
 800360c:	4603      	mov	r3, r0
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003614:	f7ff ff1c 	bl	8003450 <__NVIC_GetPriorityGrouping>
 8003618:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	6978      	ldr	r0, [r7, #20]
 8003620:	f7ff ff90 	bl	8003544 <NVIC_EncodePriority>
 8003624:	4602      	mov	r2, r0
 8003626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff ff5f 	bl	80034f0 <__NVIC_SetPriority>
}
 8003632:	bf00      	nop
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	4603      	mov	r3, r0
 8003642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff0f 	bl	800346c <__NVIC_EnableIRQ>
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	4603      	mov	r3, r0
 800365e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff1f 	bl	80034a8 <__NVIC_DisableIRQ>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff ff96 	bl	80035ac <SysTick_Config>
 8003680:	4603      	mov	r3, r0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e08d      	b.n	80037ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b47      	ldr	r3, [pc, #284]	@ (80037c4 <HAL_DMA_Init+0x138>)
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d80f      	bhi.n	80036ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	4b45      	ldr	r3, [pc, #276]	@ (80037c8 <HAL_DMA_Init+0x13c>)
 80036b2:	4413      	add	r3, r2
 80036b4:	4a45      	ldr	r2, [pc, #276]	@ (80037cc <HAL_DMA_Init+0x140>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	009a      	lsls	r2, r3, #2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a42      	ldr	r2, [pc, #264]	@ (80037d0 <HAL_DMA_Init+0x144>)
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80036c8:	e00e      	b.n	80036e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b40      	ldr	r3, [pc, #256]	@ (80037d4 <HAL_DMA_Init+0x148>)
 80036d2:	4413      	add	r3, r2
 80036d4:	4a3d      	ldr	r2, [pc, #244]	@ (80037cc <HAL_DMA_Init+0x140>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	009a      	lsls	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a3c      	ldr	r2, [pc, #240]	@ (80037d8 <HAL_DMA_Init+0x14c>)
 80036e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80036fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003702:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800370c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f908 	bl	8003950 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003748:	d102      	bne.n	8003750 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003764:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d010      	beq.n	8003790 <HAL_DMA_Init+0x104>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b04      	cmp	r3, #4
 8003774:	d80c      	bhi.n	8003790 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f928 	bl	80039cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e008      	b.n	80037a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40020407 	.word	0x40020407
 80037c8:	bffdfff8 	.word	0xbffdfff8
 80037cc:	cccccccd 	.word	0xcccccccd
 80037d0:	40020000 	.word	0x40020000
 80037d4:	bffdfbf8 	.word	0xbffdfbf8
 80037d8:	40020400 	.word	0x40020400

080037dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_DMA_Start_IT+0x20>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e066      	b.n	80038ca <HAL_DMA_Start_IT+0xee>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	d155      	bne.n	80038bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f84c 	bl	80038d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	2b00      	cmp	r3, #0
 8003840:	d008      	beq.n	8003854 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f042 020e 	orr.w	r2, r2, #14
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e00f      	b.n	8003874 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0204 	bic.w	r2, r2, #4
 8003862:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 020a 	orr.w	r2, r2, #10
 8003872:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800388c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003890:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0201 	orr.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e005      	b.n	80038c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
 80038c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b085      	sub	sp, #20
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038e8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038fa:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003900:	f003 021f 	and.w	r2, r3, #31
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	2101      	movs	r1, #1
 800390a:	fa01 f202 	lsl.w	r2, r1, r2
 800390e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b10      	cmp	r3, #16
 800391e:	d108      	bne.n	8003932 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003930:	e007      	b.n	8003942 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	60da      	str	r2, [r3, #12]
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	4b16      	ldr	r3, [pc, #88]	@ (80039b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003960:	429a      	cmp	r2, r3
 8003962:	d802      	bhi.n	800396a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003964:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e001      	b.n	800396e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800396a:	4b15      	ldr	r3, [pc, #84]	@ (80039c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800396c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	3b08      	subs	r3, #8
 800397a:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	009a      	lsls	r2, r3, #2
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4413      	add	r3, r2
 8003990:	461a      	mov	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a0b      	ldr	r2, [pc, #44]	@ (80039c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800399a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 031f 	and.w	r3, r3, #31
 80039a2:	2201      	movs	r2, #1
 80039a4:	409a      	lsls	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40020407 	.word	0x40020407
 80039bc:	40020800 	.word	0x40020800
 80039c0:	40020820 	.word	0x40020820
 80039c4:	cccccccd 	.word	0xcccccccd
 80039c8:	40020880 	.word	0x40020880

080039cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a08      	ldr	r2, [pc, #32]	@ (8003a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039ee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	1000823f 	.word	0x1000823f
 8003a10:	40020940 	.word	0x40020940

08003a14 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e033      	b.n	8003a8e <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d106      	bne.n	8003a40 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fd fe92 	bl	8001764 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f914 	bl	8003c74 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f8e2 	bl	8003c16 <FMAC_Reset>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d10c      	bne.n	8003a72 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5c:	f043 0210 	orr.w	r2, r3, #16
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	22a0      	movs	r2, #160	@ 0xa0
 8003a68:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e008      	b.n	8003a84 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_FMAC_FilterConfig>:
  * @param  pConfig pointer to a FMAC_FilterConfigTypeDef structure that
  *         contains the FMAC configuration information.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_FilterConfig(FMAC_HandleTypeDef *hfmac, FMAC_FilterConfigTypeDef *pConfig)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  return (FMAC_FilterConfig(hfmac, pConfig, PRELOAD_ACCESS_POLLING));
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	6839      	ldr	r1, [r7, #0]
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f921 	bl	8003cec <FMAC_FilterConfig>
 8003aaa:	4603      	mov	r3, r0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_FMAC_FilterPreload>:
  *         all these calls), an error will be returned.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_FilterPreload(FMAC_HandleTypeDef *hfmac, int16_t *pInput, uint8_t InputSize,
                                         int16_t *pOutput, uint8_t OutputSize)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	71fb      	strb	r3, [r7, #7]
  return (FMAC_FilterPreload(hfmac, pInput, InputSize, pOutput, OutputSize, PRELOAD_ACCESS_POLLING));
 8003ac4:	79fa      	ldrb	r2, [r7, #7]
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	7e3b      	ldrb	r3, [r7, #24]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fa46 	bl	8003f64 <FMAC_FilterPreload>
 8003ad8:	4603      	mov	r3, r0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_FMAC_FilterStart>:
  *         an external IP to empty the output buffer.
  * @param  pOutputSize pointer to the size of the output buffer. The number of read data will be written here.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_FilterStart(FMAC_HandleTypeDef *hfmac, int16_t *pOutput, uint16_t *pOutputSize)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b086      	sub	sp, #24
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
  uint32_t tmpcr = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	da01      	bge.n	8003b00 <HAL_FMAC_FilterStart+0x1e>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e054      	b.n	8003baa <HAL_FMAC_FilterStart+0xc8>
  }

  /* Check that a valid configuration was done previously */
  if (hfmac->FilterParam == 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_FMAC_FilterStart+0x2a>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e04e      	b.n	8003baa <HAL_FMAC_FilterStart+0xc8>
  }

  /* Check handle state is ready */
  if (hfmac->State == HAL_FMAC_STATE_READY)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d145      	bne.n	8003ba4 <HAL_FMAC_FilterStart+0xc2>
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_BUSY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2224      	movs	r2, #36	@ 0x24
 8003b1c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    /* CR: Configure the input access (error interruptions enabled only for IT or DMA) */
    if (hfmac->InputAccess == FMAC_BUFFER_ACCESS_DMA)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	7a1b      	ldrb	r3, [r3, #8]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d104      	bne.n	8003b32 <HAL_FMAC_FilterStart+0x50>
    {
      tmpcr |= FMAC_DMA_WEN;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e007      	b.n	8003b42 <HAL_FMAC_FilterStart+0x60>
    }
    else if (hfmac->InputAccess == FMAC_BUFFER_ACCESS_IT)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	7a1b      	ldrb	r3, [r3, #8]
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d103      	bne.n	8003b42 <HAL_FMAC_FilterStart+0x60>
    {
      tmpcr |= FMAC_IT_WIEN;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f043 0302 	orr.w	r3, r3, #2
 8003b40:	617b      	str	r3, [r7, #20]
    {
      /* nothing to do */
    }

    /* CR: Configure the output access (error interruptions enabled only for IT or DMA) */
    if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_DMA)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	7a5b      	ldrb	r3, [r3, #9]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d104      	bne.n	8003b54 <HAL_FMAC_FilterStart+0x72>
    {
      tmpcr |= FMAC_DMA_REN;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b50:	617b      	str	r3, [r7, #20]
 8003b52:	e007      	b.n	8003b64 <HAL_FMAC_FilterStart+0x82>
    }
    else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_IT)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	7a5b      	ldrb	r3, [r3, #9]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d103      	bne.n	8003b64 <HAL_FMAC_FilterStart+0x82>
    {
      tmpcr |= FMAC_IT_RIEN;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	617b      	str	r3, [r7, #20]
    {
      /* nothing to do */
    }

    /* CR: Write the configuration */
    MODIFY_REG(hfmac->Instance->CR, \
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	6979      	ldr	r1, [r7, #20]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6113      	str	r3, [r2, #16]
               FMAC_IT_RIEN | FMAC_IT_WIEN | FMAC_DMA_REN | FMAC_CR_DMAWEN, \
               tmpcr);

    /* Register the new output buffer */
    status = FMAC_ConfigFilterOutputBufferUpdateState(hfmac, pOutput, pOutputSize);
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fb4f 	bl	8004224 <FMAC_ConfigFilterOutputBufferUpdateState>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]

    if (status == HAL_OK)
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <HAL_FMAC_FilterStart+0xb8>
    {
      /* PARAM: Start the filter ( this can generate interrupts before the end of the HAL_FMAC_FilterStart ) */
      WRITE_REG(hfmac->Instance->PARAM, (uint32_t)(hfmac->FilterParam));
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	6852      	ldr	r2, [r2, #4]
 8003b98:	60da      	str	r2, [r3, #12]
    }

    /* Reset the busy flag (do not overwrite the possible write and read flag) */
    hfmac->State = HAL_FMAC_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8003ba2:	e001      	b.n	8003ba8 <HAL_FMAC_FilterStart+0xc6>
  }
  else
  {
    status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_FMAC_ErrorCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_ErrorCallback(FMAC_HandleTypeDef *hfmac)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_ErrorCallback can be implemented in the user file.
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_FMAC_HalfOutputDataReadyCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_HalfOutputDataReadyCallback(FMAC_HandleTypeDef *hfmac)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_HalfOutputDataReadyCallback can be implemented in the user file.
   */
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_FMAC_OutputDataReadyCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_OutputDataReadyCallback(FMAC_HandleTypeDef *hfmac)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_OutputDataReadyCallback can be implemented in the user file.
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_FMAC_FilterConfigCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_FilterConfigCallback(FMAC_HandleTypeDef *hfmac)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_FilterConfigCallback can be implemented in the user file.
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_FMAC_FilterPreloadCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_FilterPreloadCallback(FMAC_HandleTypeDef *hfmac)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_FilterPreloadCallback can be implemented in the user file.
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c1e:	f7fd ff4d 	bl	8001abc <HAL_GetTick>
 8003c22:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003c32:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8003c34:	e00f      	b.n	8003c56 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8003c36:	f7fd ff41 	bl	8001abc <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c44:	d907      	bls.n	8003c56 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c4a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e00a      	b.n	8003c6c <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e8      	bne.n	8003c36 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f807 	bl	8003c90 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f81b 	bl	8003cbe <FMAC_ResetOutputStateAndDataPointers>
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <FMAC_FilterConfig>:
  * @param  PreloadAccess access mode used for the preload (polling or DMA).
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_FilterConfig(FMAC_HandleTypeDef *hfmac, FMAC_FilterConfigTypeDef *pConfig,
                                           uint8_t PreloadAccess)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMAC_PARAM_P(pConfig->Filter, pConfig->P));
  assert_param(IS_FMAC_PARAM_Q(pConfig->Filter, pConfig->Q));
  assert_param(IS_FMAC_PARAM_R(pConfig->Filter, pConfig->R));

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	da01      	bge.n	8003d08 <FMAC_FilterConfig+0x1c>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e124      	b.n	8003f52 <FMAC_FilterConfig+0x266>
  }

  /* Check handle state is ready */
  if (hfmac->State != HAL_FMAC_STATE_READY)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d001      	beq.n	8003d18 <FMAC_FilterConfig+0x2c>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e11c      	b.n	8003f52 <FMAC_FilterConfig+0x266>
  }

  /* Change the FMAC state */
  hfmac->State = HAL_FMAC_STATE_BUSY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2224      	movs	r2, #36	@ 0x24
 8003d1c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d20:	f7fd fecc 	bl	8001abc <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

  /* Indicate that there is no valid configuration done */
  hfmac->FilterParam = 0U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	605a      	str	r2, [r3, #4]

  /* FMAC_X1BUFCFG: Configure the input buffer within the internal memory if required */
  if (pConfig->InputBufferSize != 0U)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	785b      	ldrb	r3, [r3, #1]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d010      	beq.n	8003d56 <FMAC_FilterConfig+0x6a>
  {
    MODIFY_REG(hfmac->Instance->X1BUFCFG,                                                                   \
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	4611      	mov	r1, r2
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	7852      	ldrb	r2, [r2, #1]
 8003d48:	0212      	lsls	r2, r2, #8
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	4311      	orrs	r1, r2
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	430b      	orrs	r3, r1
 8003d54:	6013      	str	r3, [r2, #0]
                ((((uint32_t)(pConfig->InputBufferSize))  << FMAC_X1BUFCFG_X1_BUF_SIZE_Pos) & \
                 FMAC_X1BUFCFG_X1_BUF_SIZE)));
  }

  /* FMAC_X1BUFCFG: Configure the input threshold if valid when compared to the configured X1 size */
  if (pConfig->InputThreshold != FMAC_THRESHOLD_NO_VALUE)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d00c      	beq.n	8003d7a <FMAC_FilterConfig+0x8e>
  {
    /* Check the parameter */
    assert_param(IS_FMAC_THRESHOLD_APPLICABLE(FMAC_GET_X1_SIZE(hfmac), pConfig->InputThreshold, pConfig->InputAccess));

    MODIFY_REG(hfmac->Instance->X1BUFCFG, \
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
               FMAC_X1BUFCFG_FULL_WM,     \
               ((pConfig->InputThreshold) & FMAC_X1BUFCFG_FULL_WM));
  }

  /* FMAC_X2BUFCFG: Configure the coefficient buffer within the internal memory */
  if (pConfig->CoeffBufferSize != 0U)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	7a5b      	ldrb	r3, [r3, #9]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d010      	beq.n	8003da4 <FMAC_FilterConfig+0xb8>
  {
    MODIFY_REG(hfmac->Instance->X2BUFCFG,                                                                   \
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	7a12      	ldrb	r2, [r2, #8]
 8003d90:	4611      	mov	r1, r2
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	7a52      	ldrb	r2, [r2, #9]
 8003d96:	0212      	lsls	r2, r2, #8
 8003d98:	b292      	uxth	r2, r2
 8003d9a:	4311      	orrs	r1, r2
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6053      	str	r3, [r2, #4]
                ((((uint32_t)(pConfig->CoeffBufferSize))  << FMAC_X2BUFCFG_X2_BUF_SIZE_Pos) &\
                 FMAC_X2BUFCFG_X2_BUF_SIZE)));
  }

  /* FMAC_YBUFCFG: Configure the output buffer within the internal memory if required */
  if (pConfig->OutputBufferSize != 0U)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	7adb      	ldrb	r3, [r3, #11]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d010      	beq.n	8003dce <FMAC_FilterConfig+0xe2>
  {
    MODIFY_REG(hfmac->Instance->YBUFCFG,                                                                    \
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0c1b      	lsrs	r3, r3, #16
 8003db4:	041b      	lsls	r3, r3, #16
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	7a92      	ldrb	r2, [r2, #10]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	7ad2      	ldrb	r2, [r2, #11]
 8003dc0:	0212      	lsls	r2, r2, #8
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	4311      	orrs	r1, r2
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	6093      	str	r3, [r2, #8]
               (((((uint32_t)(pConfig->OutputBaseAddress)) << FMAC_YBUFCFG_Y_BASE_Pos)     & FMAC_YBUFCFG_Y_BASE) |    \
                ((((uint32_t)(pConfig->OutputBufferSize))  << FMAC_YBUFCFG_Y_BUF_SIZE_Pos) & FMAC_YBUFCFG_Y_BUF_SIZE)));
  }

  /* FMAC_YBUFCFG: Configure the output threshold if valid when compared to the configured Y size */
  if (pConfig->OutputThreshold != FMAC_THRESHOLD_NO_VALUE)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd6:	d00c      	beq.n	8003df2 <FMAC_FilterConfig+0x106>
  {
    /* Check the parameter */
    assert_param(IS_FMAC_THRESHOLD_APPLICABLE(FMAC_GET_Y_SIZE(hfmac), pConfig->OutputThreshold, pConfig->OutputAccess));

    MODIFY_REG(hfmac->Instance->YBUFCFG, \
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	609a      	str	r2, [r3, #8]
               FMAC_YBUFCFG_EMPTY_WM,    \
               ((pConfig->OutputThreshold) & FMAC_YBUFCFG_EMPTY_WM));
  }

  /* FMAC_CR: Configure the clip feature */
  tmpcr = pConfig->Clip & FMAC_CR_CLIPEN;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dfa:	617b      	str	r3, [r7, #20]

  /* FMAC_CR: If IT or DMA will be used, enable error interrupts.
    * Being more a debugging feature, FMAC_CR_SATIEN isn't enabled by default. */
  if ((pConfig->InputAccess  == FMAC_BUFFER_ACCESS_DMA) || (pConfig->InputAccess  == FMAC_BUFFER_ACCESS_IT) ||
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	7f5b      	ldrb	r3, [r3, #29]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d00b      	beq.n	8003e1c <FMAC_FilterConfig+0x130>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	7f5b      	ldrb	r3, [r3, #29]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d007      	beq.n	8003e1c <FMAC_FilterConfig+0x130>
      (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_DMA) || (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_IT))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	7f9b      	ldrb	r3, [r3, #30]
  if ((pConfig->InputAccess  == FMAC_BUFFER_ACCESS_DMA) || (pConfig->InputAccess  == FMAC_BUFFER_ACCESS_IT) ||
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d003      	beq.n	8003e1c <FMAC_FilterConfig+0x130>
      (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_DMA) || (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_IT))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	7f9b      	ldrb	r3, [r3, #30]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d103      	bne.n	8003e24 <FMAC_FilterConfig+0x138>
  {
    tmpcr |= FMAC_IT_UNFLIEN | FMAC_IT_OVFLIEN;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f043 030c 	orr.w	r3, r3, #12
 8003e22:	617b      	str	r3, [r7, #20]
  }

  /* FMAC_CR: write the value */
  WRITE_REG(hfmac->Instance->CR, tmpcr);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	611a      	str	r2, [r3, #16]

  /* Save the input/output accesses in order to configure RIEN, WIEN, DMAREN and DMAWEN during filter start */
  hfmac->InputAccess = pConfig->InputAccess;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	7f5a      	ldrb	r2, [r3, #29]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	721a      	strb	r2, [r3, #8]
  hfmac->OutputAccess = pConfig->OutputAccess;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	7f9a      	ldrb	r2, [r3, #30]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	725a      	strb	r2, [r3, #9]
  assert_param(((pConfig->Filter == FMAC_FUNC_CONVO_FIR) && (x2size >= pConfig->P)) || \
               ((pConfig->Filter == FMAC_FUNC_IIR_DIRECT_FORM_1) && \
                (x2size >= ((uint32_t)pConfig->P + (uint32_t)pConfig->Q))));

  /* Build the PARAM value that will be used when starting the filter */
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((((uint32_t)(pConfig->P)) << FMAC_PARAM_P_Pos) & FMAC_PARAM_P) | \
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 8003e46:	431a      	orrs	r2, r3
                        ((((uint32_t)(pConfig->Q)) << FMAC_PARAM_Q_Pos) & FMAC_PARAM_Q) | \
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	b29b      	uxth	r3, r3
                        ((((uint32_t)(pConfig->P)) << FMAC_PARAM_P_Pos) & FMAC_PARAM_P) | \
 8003e52:	431a      	orrs	r2, r3
                        ((((uint32_t)(pConfig->R)) << FMAC_PARAM_R_Pos) & FMAC_PARAM_R));
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8003e5a:	041b      	lsls	r3, r3, #16
 8003e5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                        ((((uint32_t)(pConfig->Q)) << FMAC_PARAM_Q_Pos) & FMAC_PARAM_Q) | \
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	605a      	str	r2, [r3, #4]

  /* Initialize the coefficient buffer if required (pCoeffA for FIR only) */
  if ((pConfig->pCoeffB != NULL) && (pConfig->CoeffBSize != 0U))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d06a      	beq.n	8003f48 <FMAC_FilterConfig+0x25c>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	7f1b      	ldrb	r3, [r3, #28]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d066      	beq.n	8003f48 <FMAC_FilterConfig+0x25c>
                 ((pConfig->Filter == FMAC_FUNC_IIR_DIRECT_FORM_1) &&
                  (pConfig->pCoeffA != NULL) && (pConfig->CoeffASize != 0U) &&
                  (pConfig->CoeffASize >= pConfig->Q)));

    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM,                      \
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	7f1b      	ldrb	r3, [r3, #28]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	7d1b      	ldrb	r3, [r3, #20]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	431a      	orrs	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 4202 	orr.w	r2, r2, #2181038080	@ 0x82000000
 8003e90:	60da      	str	r2, [r3, #12]
              (((uint32_t)(pConfig->CoeffBSize) << FMAC_PARAM_P_Pos) | \
               ((uint32_t)(pConfig->CoeffASize) << FMAC_PARAM_Q_Pos) | \
               FMAC_FUNC_LOAD_X2 | FMAC_PARAM_START));

    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d133      	bne.n	8003f00 <FMAC_FilterConfig+0x214>
    {
      /* Load the buffer into the internal memory */
      FMAC_WritePreloadDataIncrementPtr(hfmac, &(pConfig->pCoeffB), pConfig->CoeffBSize);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f103 0118 	add.w	r1, r3, #24
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	7f1b      	ldrb	r3, [r3, #28]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f977 	bl	8004198 <FMAC_WritePreloadDataIncrementPtr>

      /* Load pCoeffA if needed */
      if ((pConfig->pCoeffA != NULL) && (pConfig->CoeffASize != 0U))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00c      	beq.n	8003ecc <FMAC_FilterConfig+0x1e0>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	7d1b      	ldrb	r3, [r3, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <FMAC_FilterConfig+0x1e0>
      {
        /* Load the buffer into the internal memory */
        FMAC_WritePreloadDataIncrementPtr(hfmac, &(pConfig->pCoeffA), pConfig->CoeffASize);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f103 0110 	add.w	r1, r3, #16
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	7d1b      	ldrb	r3, [r3, #20]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f966 	bl	8004198 <FMAC_WritePreloadDataIncrementPtr>
      }

      /* Wait for the end of the writing */
      if (FMAC_WaitOnStartUntilTimeout(hfmac, tickstart, HAL_FMAC_TIMEOUT_VALUE) != HAL_OK)
 8003ecc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ed0:	6939      	ldr	r1, [r7, #16]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f985 	bl	80041e2 <FMAC_WaitOnStartUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <FMAC_FilterConfig+0x20a>
      {
        hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	635a      	str	r2, [r3, #52]	@ 0x34
        hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	22a0      	movs	r2, #160	@ 0xa0
 8003eee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e02d      	b.n	8003f52 <FMAC_FilterConfig+0x266>
      }

      /* Change the FMAC state */
      hfmac->State = HAL_FMAC_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8003efe:	e027      	b.n	8003f50 <FMAC_FilterConfig+0x264>
    }
    else
    {
      hfmac->pInput = pConfig->pCoeffA;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = pConfig->CoeffASize;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	7d1b      	ldrb	r3, [r3, #20]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	821a      	strh	r2, [r3, #16]

      /* Set the FMAC DMA transfer complete callback */
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	@ 0x30
      hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterConfig;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8003f5c <FMAC_FilterConfig+0x270>)
 8003f20:	62da      	str	r2, [r3, #44]	@ 0x2c
      /* Set the DMA error callback */
      hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f26:	4a0e      	ldr	r2, [pc, #56]	@ (8003f60 <FMAC_FilterConfig+0x274>)
 8003f28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA stream managing FMAC preload data write */
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pConfig->pCoeffB, (uint32_t)&hfmac->Instance->WDATA,
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	4619      	mov	r1, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3318      	adds	r3, #24
 8003f3a:	461a      	mov	r2, r3
                               pConfig->CoeffBSize));
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	7f1b      	ldrb	r3, [r3, #28]
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pConfig->pCoeffB, (uint32_t)&hfmac->Instance->WDATA,
 8003f40:	f7ff fc4c 	bl	80037dc <HAL_DMA_Start_IT>
 8003f44:	4603      	mov	r3, r0
 8003f46:	e004      	b.n	8003f52 <FMAC_FilterConfig+0x266>
    }
  }
  else
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	08004339 	.word	0x08004339
 8003f60:	080044f5 	.word	0x080044f5

08003f64 <FMAC_FilterPreload>:
  *         all these calls), an error will be returned.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_FilterPreload(FMAC_HandleTypeDef *hfmac, int16_t *pInput, uint8_t InputSize,
                                            int16_t *pOutput, uint8_t OutputSize, uint8_t PreloadAccess)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da01      	bge.n	8003f82 <FMAC_FilterPreload+0x1e>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e102      	b.n	8004188 <FMAC_FilterPreload+0x224>
  }

  /* Check that a valid configuration was done previously */
  if (hfmac->FilterParam == 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <FMAC_FilterPreload+0x2a>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0fc      	b.n	8004188 <FMAC_FilterPreload+0x224>
  }

  /* Check the preload input buffers isn't too big */
  if ((InputSize > FMAC_GET_X1_SIZE(hfmac)) && (pInput != NULL))
 8003f8e:	79fa      	ldrb	r2, [r7, #7]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d904      	bls.n	8003fa8 <FMAC_FilterPreload+0x44>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <FMAC_FilterPreload+0x44>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0ef      	b.n	8004188 <FMAC_FilterPreload+0x224>
  }

  /* Check the preload output buffer isn't too big */
  if ((OutputSize > FMAC_GET_Y_SIZE(hfmac)) && (pOutput != NULL))
 8003fa8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d904      	bls.n	8003fc4 <FMAC_FilterPreload+0x60>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <FMAC_FilterPreload+0x60>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0e1      	b.n	8004188 <FMAC_FilterPreload+0x224>
  }

  /* Check handle state is ready */
  if (hfmac->State != HAL_FMAC_STATE_READY)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d001      	beq.n	8003fd4 <FMAC_FilterPreload+0x70>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0d9      	b.n	8004188 <FMAC_FilterPreload+0x224>
  }

  /* Change the FMAC state */
  hfmac->State = HAL_FMAC_STATE_BUSY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2224      	movs	r2, #36	@ 0x24
 8003fd8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fdc:	f7fd fd6e 	bl	8001abc <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

  /* Preload the input buffer if required */
  if ((pInput != NULL) && (InputSize != 0U))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d049      	beq.n	800407c <FMAC_FilterPreload+0x118>
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d046      	beq.n	800407c <FMAC_FilterPreload+0x118>
  {
    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM, \
 8003fee:	79fa      	ldrb	r2, [r7, #7]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 4201 	orr.w	r2, r2, #2164260864	@ 0x81000000
 8003ff8:	60da      	str	r2, [r3, #12]
              (((uint32_t)InputSize << FMAC_PARAM_P_Pos) | FMAC_FUNC_LOAD_X1 | FMAC_PARAM_START));

    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8003ffa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d11b      	bne.n	800403a <FMAC_FilterPreload+0xd6>
    {
      /* Load the buffer into the internal memory */
      FMAC_WritePreloadDataIncrementPtr(hfmac, &pInput, InputSize);
 8004002:	79fa      	ldrb	r2, [r7, #7]
 8004004:	f107 0308 	add.w	r3, r7, #8
 8004008:	4619      	mov	r1, r3
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f8c4 	bl	8004198 <FMAC_WritePreloadDataIncrementPtr>

      /* Wait for the end of the writing */
      if (FMAC_WaitOnStartUntilTimeout(hfmac, tickstart, HAL_FMAC_TIMEOUT_VALUE) != HAL_OK)
 8004010:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004014:	6939      	ldr	r1, [r7, #16]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f8e3 	bl	80041e2 <FMAC_WaitOnStartUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d02c      	beq.n	800407c <FMAC_FilterPreload+0x118>
      {
        hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004026:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	635a      	str	r2, [r3, #52]	@ 0x34
        hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	22a0      	movs	r2, #160	@ 0xa0
 8004032:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e0a6      	b.n	8004188 <FMAC_FilterPreload+0x224>
      }
    }
    else
    {
      hfmac->pInput = pOutput;
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = OutputSize;
 8004040:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	821a      	strh	r2, [r3, #16]

      /* Set the FMAC DMA transfer complete callback */
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404e:	2200      	movs	r2, #0
 8004050:	631a      	str	r2, [r3, #48]	@ 0x30
      hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterPreload;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	4a4e      	ldr	r2, [pc, #312]	@ (8004190 <FMAC_FilterPreload+0x22c>)
 8004058:	62da      	str	r2, [r3, #44]	@ 0x2c
      /* Set the DMA error callback */
      hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405e:	4a4d      	ldr	r2, [pc, #308]	@ (8004194 <FMAC_FilterPreload+0x230>)
 8004060:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA stream managing FMAC preload data write */
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pInput, (uint32_t)&hfmac->Instance->WDATA, InputSize));
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4619      	mov	r1, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3318      	adds	r3, #24
 8004070:	461a      	mov	r2, r3
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	f7ff fbb2 	bl	80037dc <HAL_DMA_Start_IT>
 8004078:	4603      	mov	r3, r0
 800407a:	e085      	b.n	8004188 <FMAC_FilterPreload+0x224>
    }
  }

  /* Preload the output buffer if required */
  if ((pOutput != NULL) && (OutputSize != 0U))
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d04a      	beq.n	8004118 <FMAC_FilterPreload+0x1b4>
 8004082:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d046      	beq.n	8004118 <FMAC_FilterPreload+0x1b4>
  {
    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM, \
 800408a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 4203 	orr.w	r2, r2, #2197815296	@ 0x83000000
 8004096:	60da      	str	r2, [r3, #12]
              (((uint32_t)OutputSize << FMAC_PARAM_P_Pos) | FMAC_FUNC_LOAD_Y | FMAC_PARAM_START));

    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8004098:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800409c:	2b01      	cmp	r3, #1
 800409e:	d11b      	bne.n	80040d8 <FMAC_FilterPreload+0x174>
    {
      /* Load the buffer into the internal memory */
      FMAC_WritePreloadDataIncrementPtr(hfmac, &pOutput, OutputSize);
 80040a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80040a4:	463b      	mov	r3, r7
 80040a6:	4619      	mov	r1, r3
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f875 	bl	8004198 <FMAC_WritePreloadDataIncrementPtr>

      /* Wait for the end of the writing */
      if (FMAC_WaitOnStartUntilTimeout(hfmac, tickstart, HAL_FMAC_TIMEOUT_VALUE) != HAL_OK)
 80040ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040b2:	6939      	ldr	r1, [r7, #16]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f894 	bl	80041e2 <FMAC_WaitOnStartUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d02b      	beq.n	8004118 <FMAC_FilterPreload+0x1b4>
      {
        hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	635a      	str	r2, [r3, #52]	@ 0x34
        hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	22a0      	movs	r2, #160	@ 0xa0
 80040d0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e057      	b.n	8004188 <FMAC_FilterPreload+0x224>
      }
    }
    else
    {
      hfmac->pInput = NULL;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = 0U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	821a      	strh	r2, [r3, #16]

      /* Set the FMAC DMA transfer complete callback */
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	2200      	movs	r2, #0
 80040ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterPreload;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	4a27      	ldr	r2, [pc, #156]	@ (8004190 <FMAC_FilterPreload+0x22c>)
 80040f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      /* Set the DMA error callback */
      hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	4a26      	ldr	r2, [pc, #152]	@ (8004194 <FMAC_FilterPreload+0x230>)
 80040fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA stream managing FMAC preload data write */
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pOutput, (uint32_t)&hfmac->Instance->WDATA, OutputSize));
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	4619      	mov	r1, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3318      	adds	r3, #24
 800410a:	461a      	mov	r2, r3
 800410c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004110:	f7ff fb64 	bl	80037dc <HAL_DMA_Start_IT>
 8004114:	4603      	mov	r3, r0
 8004116:	e037      	b.n	8004188 <FMAC_FilterPreload+0x224>
    }
  }

  /* Update the error codes */
  if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_OVFL))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004126:	d105      	bne.n	8004134 <FMAC_FilterPreload+0x1d0>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_OVFL;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412c:	f043 0204 	orr.w	r2, r3, #4
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_UNFL))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800413e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004142:	d105      	bne.n	8004150 <FMAC_FilterPreload+0x1ec>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_UNFL;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004148:	f043 0202 	orr.w	r2, r3, #2
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_SAT))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	d105      	bne.n	800416c <FMAC_FilterPreload+0x208>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_SAT;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004164:	f043 0201 	orr.w	r2, r3, #1
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Change the FMAC state */
  hfmac->State = HAL_FMAC_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Return function status */
  if (hfmac->ErrorCode == HAL_FMAC_ERROR_NONE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <FMAC_FilterPreload+0x21e>
  {
    status = HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	75fb      	strb	r3, [r7, #23]
 8004180:	e001      	b.n	8004186 <FMAC_FilterPreload+0x222>
  }
  else
  {
    status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004186:	7dfb      	ldrb	r3, [r7, #23]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	08004405 	.word	0x08004405
 8004194:	080044f5 	.word	0x080044f5

08004198 <FMAC_WritePreloadDataIncrementPtr>:
  * @param  ppData pointer to pointer to the data buffer.
  * @param  Size size of the data buffer.
  * @retval None
  */
static void FMAC_WritePreloadDataIncrementPtr(FMAC_HandleTypeDef *hfmac, int16_t **ppData, uint8_t Size)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	4613      	mov	r3, r2
 80041a4:	71fb      	strb	r3, [r7, #7]
  uint8_t index;

  /* Load the buffer into the internal memory */
  for (index = Size; index > 0U; index--)
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	75fb      	strb	r3, [r7, #23]
 80041aa:	e010      	b.n	80041ce <FMAC_WritePreloadDataIncrementPtr+0x36>
  {
    WRITE_REG(hfmac->Instance->WDATA, (((uint32_t)(*(*ppData))) & FMAC_WDATA_WDATA));
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041b4:	461a      	mov	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	b292      	uxth	r2, r2
 80041bc:	619a      	str	r2, [r3, #24]
    (*ppData)++;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	1c9a      	adds	r2, r3, #2
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	601a      	str	r2, [r3, #0]
  for (index = Size; index > 0U; index--)
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	75fb      	strb	r3, [r7, #23]
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1eb      	bne.n	80041ac <FMAC_WritePreloadDataIncrementPtr+0x14>
  }
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <FMAC_WaitOnStartUntilTimeout>:
  * @param  Tickstart Tick start value.
  * @param  Timeout Timeout duration.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_WaitOnStartUntilTimeout(FMAC_HandleTypeDef *hfmac, uint32_t Tickstart, uint32_t Timeout)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
  /* Wait until flag changes */
  while (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 80041ee:	e00f      	b.n	8004210 <FMAC_WaitOnStartUntilTimeout+0x2e>
  {
    if ((HAL_GetTick() - Tickstart) > Timeout)
 80041f0:	f7fd fc64 	bl	8001abc <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d207      	bcs.n	8004210 <FMAC_WaitOnStartUntilTimeout+0x2e>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004204:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	635a      	str	r2, [r3, #52]	@ 0x34

      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e005      	b.n	800421c <FMAC_WaitOnStartUntilTimeout+0x3a>
  while (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	dbea      	blt.n	80041f0 <FMAC_WaitOnStartUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <FMAC_ConfigFilterOutputBufferUpdateState>:
  *         of data read from FMAC).
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_ConfigFilterOutputBufferUpdateState(FMAC_HandleTypeDef *hfmac, int16_t *pOutput,
                                                                  uint16_t *pOutputSize)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  /* Reset the current size */
  hfmac->OutputCurrentSize = 0U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	839a      	strh	r2, [r3, #28]

  /* Check whether a valid pointer was provided */
  if ((pOutput == NULL) || (pOutputSize == NULL) || (*pOutputSize == 0U))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d006      	beq.n	800424a <FMAC_ConfigFilterOutputBufferUpdateState+0x26>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <FMAC_ConfigFilterOutputBufferUpdateState+0x26>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <FMAC_ConfigFilterOutputBufferUpdateState+0x3c>
  {
    /* The user will have to provide a valid configuration later */
    hfmac->pOutput = NULL;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 800425e:	e03f      	b.n	80042e0 <FMAC_ConfigFilterOutputBufferUpdateState+0xbc>
  }
  /* Handle the pointer depending on the input access */
  else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_DMA)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	7a5b      	ldrb	r3, [r3, #9]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d122      	bne.n	80042ae <FMAC_ConfigFilterOutputBufferUpdateState+0x8a>
  {
    hfmac->pOutput = NULL;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_BUSY_RD;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2225      	movs	r2, #37	@ 0x25
 8004278:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    /* Set the FMAC DMA transfer complete callback */
    hfmac->hdmaOut->XferHalfCpltCallback = FMAC_DMAHalfOutputDataReady;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004280:	4a1a      	ldr	r2, [pc, #104]	@ (80042ec <FMAC_ConfigFilterOutputBufferUpdateState+0xc8>)
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
    hfmac->hdmaOut->XferCpltCallback = FMAC_DMAOutputDataReady;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	4a19      	ldr	r2, [pc, #100]	@ (80042f0 <FMAC_ConfigFilterOutputBufferUpdateState+0xcc>)
 800428a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Set the DMA error callback */
    hfmac->hdmaOut->XferErrorCallback = FMAC_DMAError;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	4a18      	ldr	r2, [pc, #96]	@ (80042f4 <FMAC_ConfigFilterOutputBufferUpdateState+0xd0>)
 8004292:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA stream managing FMAC output data read */
    return (HAL_DMA_Start_IT(hfmac->hdmaOut, (uint32_t)&hfmac->Instance->RDATA, (uint32_t)pOutput, *pOutputSize));
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	331c      	adds	r3, #28
 800429e:	4619      	mov	r1, r3
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	f7ff fa99 	bl	80037dc <HAL_DMA_Start_IT>
 80042aa:	4603      	mov	r3, r0
 80042ac:	e019      	b.n	80042e2 <FMAC_ConfigFilterOutputBufferUpdateState+0xbe>
  }
  else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_NONE)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	7a5b      	ldrb	r3, [r3, #9]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <FMAC_ConfigFilterOutputBufferUpdateState+0xa8>
  {
    hfmac->pOutput = NULL;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 80042ca:	e009      	b.n	80042e0 <FMAC_ConfigFilterOutputBufferUpdateState+0xbc>
  }
  else
  {
    /* Update the output data information (polling, IT) */
    hfmac->pOutput = pOutput;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = pOutputSize;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_BUSY_RD;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2225      	movs	r2, #37	@ 0x25
 80042dc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	080042f9 	.word	0x080042f9
 80042f0:	08004315 	.word	0x08004315
 80042f4:	080044f5 	.word	0x080044f5

080042f8 <FMAC_DMAHalfOutputDataReady>:
  * @brief  DMA FMAC Output Data process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAHalfOutputDataReady(DMA_HandleTypeDef *hdma)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004304:	60fb      	str	r3, [r7, #12]

  /* Call half output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->HalfOutputDataReadyCallback(hfmac);
#else
  HAL_FMAC_HalfOutputDataReadyCallback(hfmac);
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff fc5d 	bl	8003bc6 <HAL_FMAC_HalfOutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <FMAC_DMAOutputDataReady>:
  * @brief  DMA FMAC Output Data process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAOutputDataReady(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	60fb      	str	r3, [r7, #12]

  /* Reset the pointers to indicate new data will be needed */
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff fccb 	bl	8003cbe <FMAC_ResetOutputStateAndDataPointers>

  /* Call output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->OutputDataReadyCallback(hfmac);
#else
  HAL_FMAC_OutputDataReadyCallback(hfmac);
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7ff fc56 	bl	8003bda <HAL_FMAC_OutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <FMAC_DMAFilterConfig>:
  * @brief  DMA FMAC Filter Configuration process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAFilterConfig(DMA_HandleTypeDef *hdma)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint8_t index;

  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	60bb      	str	r3, [r7, #8]

  /* If needed, write CoeffA and exit */
  if (hfmac->pInput != NULL)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d027      	beq.n	800439e <FMAC_DMAFilterConfig+0x66>
  {
    /* Set the FMAC DMA transfer complete callback */
    hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004352:	2200      	movs	r2, #0
 8004354:	631a      	str	r2, [r3, #48]	@ 0x30
    hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterConfig;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435a:	4a28      	ldr	r2, [pc, #160]	@ (80043fc <FMAC_DMAFilterConfig+0xc4>)
 800435c:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Set the DMA error callback */
    hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004362:	4a27      	ldr	r2, [pc, #156]	@ (8004400 <FMAC_DMAFilterConfig+0xc8>)
 8004364:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA stream managing FMAC preload data write */
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	4619      	mov	r1, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3318      	adds	r3, #24
 8004376:	461a      	mov	r2, r3
                         hfmac->InputCurrentSize) == HAL_OK)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	8a1b      	ldrh	r3, [r3, #16]
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 800437c:	f7ff fa2e 	bl	80037dc <HAL_DMA_Start_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <FMAC_DMAFilterConfig+0x5c>
    {
      hfmac->pInput = NULL;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2200      	movs	r2, #0
 800438a:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = 0U;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2200      	movs	r2, #0
 8004390:	821a      	strh	r2, [r3, #16]
      return;
 8004392:	e02f      	b.n	80043f4 <FMAC_DMAFilterConfig+0xbc>
    }

    /* If not exited, there was an error: set FMAC handle state to error */
    hfmac->State = HAL_FMAC_STATE_ERROR;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	22e0      	movs	r2, #224	@ 0xe0
 8004398:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800439c:	e021      	b.n	80043e2 <FMAC_DMAFilterConfig+0xaa>
  }
  else
  {
    /* Wait for the end of the writing */
    for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]
 80043a2:	e007      	b.n	80043b4 <FMAC_DMAFilterConfig+0x7c>
    {
      if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) == 0U)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	da06      	bge.n	80043bc <FMAC_DMAFilterConfig+0x84>
    for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	3301      	adds	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	2bff      	cmp	r3, #255	@ 0xff
 80043b8:	d1f4      	bne.n	80043a4 <FMAC_DMAFilterConfig+0x6c>
 80043ba:	e000      	b.n	80043be <FMAC_DMAFilterConfig+0x86>
      {
        break;
 80043bc:	bf00      	nop
      }
    }

    /* If 'START' is still set, there was a timeout: set FMAC handle state to timeout */
    if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	da04      	bge.n	80043d2 <FMAC_DMAFilterConfig+0x9a>
    {
      hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	22a0      	movs	r2, #160	@ 0xa0
 80043cc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80043d0:	e007      	b.n	80043e2 <FMAC_DMAFilterConfig+0xaa>
    }
    else
    {
      /* Change the FMAC state */
      hfmac->State = HAL_FMAC_STATE_READY;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

      /* Call output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
      hfmac->FilterConfigCallback(hfmac);
#else
      HAL_FMAC_FilterConfigCallback(hfmac);
 80043da:	68b8      	ldr	r0, [r7, #8]
 80043dc:	f7ff fc07 	bl	8003bee <HAL_FMAC_FilterConfigCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
      return;
 80043e0:	e008      	b.n	80043f4 <FMAC_DMAFilterConfig+0xbc>
    }
  }

  /* If not exited, there was an error: set FMAC handle error code to DMA error */
  hfmac->ErrorCode |= HAL_FMAC_ERROR_DMA;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e6:	f043 0208 	orr.w	r2, r3, #8
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->ErrorCallback(hfmac);
#else
  HAL_FMAC_ErrorCallback(hfmac);
 80043ee:	68b8      	ldr	r0, [r7, #8]
 80043f0:	f7ff fbdf 	bl	8003bb2 <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	08004339 	.word	0x08004339
 8004400:	080044f5 	.word	0x080044f5

08004404 <FMAC_DMAFilterPreload>:
  * @brief  DMA FMAC Filter Configuration process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAFilterPreload(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint8_t index;

  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004410:	60bb      	str	r3, [r7, #8]

  /* Wait for the end of the X1 writing */
  for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]
 8004416:	e007      	b.n	8004428 <FMAC_DMAFilterPreload+0x24>
  {
    if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) == 0U)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	da06      	bge.n	8004430 <FMAC_DMAFilterPreload+0x2c>
  for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	3301      	adds	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	2bff      	cmp	r3, #255	@ 0xff
 800442c:	d1f4      	bne.n	8004418 <FMAC_DMAFilterPreload+0x14>
 800442e:	e000      	b.n	8004432 <FMAC_DMAFilterPreload+0x2e>
    {
      break;
 8004430:	bf00      	nop
    }
  }

  /* If 'START' is still set, there was an error: set FMAC handle state to error */
  if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	da0a      	bge.n	8004452 <FMAC_DMAFilterPreload+0x4e>
  {
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	22a0      	movs	r2, #160	@ 0xa0
 8004440:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004448:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004450:	e039      	b.n	80044c6 <FMAC_DMAFilterPreload+0xc2>
  }
  /* If needed, preload Y buffer */
  else if ((hfmac->pInput != NULL) && (hfmac->InputCurrentSize != 0U))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d035      	beq.n	80044c6 <FMAC_DMAFilterPreload+0xc2>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	8a1b      	ldrh	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d031      	beq.n	80044c6 <FMAC_DMAFilterPreload+0xc2>
  {
    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM, \
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	8a1b      	ldrh	r3, [r3, #16]
 8004466:	461a      	mov	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 4203 	orr.w	r2, r2, #2197815296	@ 0x83000000
 8004470:	60da      	str	r2, [r3, #12]
              (((uint32_t)(hfmac->InputCurrentSize) << FMAC_PARAM_P_Pos) | FMAC_FUNC_LOAD_Y | FMAC_PARAM_START));

    /* Set the FMAC DMA transfer complete callback */
    hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	@ 0x30
    hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterPreload;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447e:	4a1b      	ldr	r2, [pc, #108]	@ (80044ec <FMAC_DMAFilterPreload+0xe8>)
 8004480:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* Set the DMA error callback */
    hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	4a1a      	ldr	r2, [pc, #104]	@ (80044f0 <FMAC_DMAFilterPreload+0xec>)
 8004488:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA stream managing FMAC preload data write */
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4619      	mov	r1, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3318      	adds	r3, #24
 800449a:	461a      	mov	r2, r3
                         hfmac->InputCurrentSize) == HAL_OK)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	8a1b      	ldrh	r3, [r3, #16]
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 80044a0:	f7ff f99c 	bl	80037dc <HAL_DMA_Start_IT>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <FMAC_DMAFilterPreload+0xb4>
    {
      hfmac->pInput = NULL;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2200      	movs	r2, #0
 80044ae:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = 0U;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2200      	movs	r2, #0
 80044b4:	821a      	strh	r2, [r3, #16]
      return;
 80044b6:	e015      	b.n	80044e4 <FMAC_DMAFilterPreload+0xe0>
    }

    /* If not exited, there was an error */
    hfmac->ErrorCode = HAL_FMAC_ERROR_DMA;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2208      	movs	r2, #8
 80044bc:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_ERROR;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	22e0      	movs	r2, #224	@ 0xe0
 80044c2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  else
  {
    /* nothing to do */
  }

  if (hfmac->ErrorCode == HAL_FMAC_ERROR_NONE)
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d107      	bne.n	80044de <FMAC_DMAFilterPreload+0xda>
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_READY;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    /* Call output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
    hfmac->FilterPreloadCallback(hfmac);
#else
    HAL_FMAC_FilterPreloadCallback(hfmac);
 80044d6:	68b8      	ldr	r0, [r7, #8]
 80044d8:	f7ff fb93 	bl	8003c02 <HAL_FMAC_FilterPreloadCallback>
 80044dc:	e002      	b.n	80044e4 <FMAC_DMAFilterPreload+0xe0>
  {
    /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
    hfmac->ErrorCallback(hfmac);
#else
    HAL_FMAC_ErrorCallback(hfmac);
 80044de:	68b8      	ldr	r0, [r7, #8]
 80044e0:	f7ff fb67 	bl	8003bb2 <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }
}
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	08004405 	.word	0x08004405
 80044f0:	080044f5 	.word	0x080044f5

080044f4 <FMAC_DMAError>:
  * @brief  DMA FMAC communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAError(DMA_HandleTypeDef *hdma)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004500:	60fb      	str	r3, [r7, #12]

  /* Set FMAC handle state to error */
  hfmac->State = HAL_FMAC_STATE_ERROR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	22e0      	movs	r2, #224	@ 0xe0
 8004506:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Set FMAC handle error code to DMA error */
  hfmac->ErrorCode |= HAL_FMAC_ERROR_DMA;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450e:	f043 0208 	orr.w	r2, r3, #8
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->ErrorCallback(hfmac);
#else
  HAL_FMAC_ErrorCallback(hfmac);
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f7ff fb4b 	bl	8003bb2 <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004532:	e15a      	b.n	80047ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2101      	movs	r1, #1
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	4013      	ands	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 814c 	beq.w	80047e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b01      	cmp	r3, #1
 8004556:	d005      	beq.n	8004564 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004560:	2b02      	cmp	r3, #2
 8004562:	d130      	bne.n	80045c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800459a:	2201      	movs	r2, #1
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f003 0201 	and.w	r2, r3, #1
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d017      	beq.n	8004602 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	2203      	movs	r2, #3
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d123      	bne.n	8004656 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	08da      	lsrs	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3208      	adds	r2, #8
 8004616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	220f      	movs	r2, #15
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	08da      	lsrs	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3208      	adds	r2, #8
 8004650:	6939      	ldr	r1, [r7, #16]
 8004652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	2203      	movs	r2, #3
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4013      	ands	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 0203 	and.w	r2, r3, #3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80a6 	beq.w	80047e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004698:	4b5b      	ldr	r3, [pc, #364]	@ (8004808 <HAL_GPIO_Init+0x2e4>)
 800469a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469c:	4a5a      	ldr	r2, [pc, #360]	@ (8004808 <HAL_GPIO_Init+0x2e4>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80046a4:	4b58      	ldr	r3, [pc, #352]	@ (8004808 <HAL_GPIO_Init+0x2e4>)
 80046a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	60bb      	str	r3, [r7, #8]
 80046ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046b0:	4a56      	ldr	r2, [pc, #344]	@ (800480c <HAL_GPIO_Init+0x2e8>)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	089b      	lsrs	r3, r3, #2
 80046b6:	3302      	adds	r3, #2
 80046b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	220f      	movs	r2, #15
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80046da:	d01f      	beq.n	800471c <HAL_GPIO_Init+0x1f8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a4c      	ldr	r2, [pc, #304]	@ (8004810 <HAL_GPIO_Init+0x2ec>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d019      	beq.n	8004718 <HAL_GPIO_Init+0x1f4>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a4b      	ldr	r2, [pc, #300]	@ (8004814 <HAL_GPIO_Init+0x2f0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <HAL_GPIO_Init+0x1f0>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004818 <HAL_GPIO_Init+0x2f4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00d      	beq.n	8004710 <HAL_GPIO_Init+0x1ec>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a49      	ldr	r2, [pc, #292]	@ (800481c <HAL_GPIO_Init+0x2f8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d007      	beq.n	800470c <HAL_GPIO_Init+0x1e8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a48      	ldr	r2, [pc, #288]	@ (8004820 <HAL_GPIO_Init+0x2fc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d101      	bne.n	8004708 <HAL_GPIO_Init+0x1e4>
 8004704:	2305      	movs	r3, #5
 8004706:	e00a      	b.n	800471e <HAL_GPIO_Init+0x1fa>
 8004708:	2306      	movs	r3, #6
 800470a:	e008      	b.n	800471e <HAL_GPIO_Init+0x1fa>
 800470c:	2304      	movs	r3, #4
 800470e:	e006      	b.n	800471e <HAL_GPIO_Init+0x1fa>
 8004710:	2303      	movs	r3, #3
 8004712:	e004      	b.n	800471e <HAL_GPIO_Init+0x1fa>
 8004714:	2302      	movs	r3, #2
 8004716:	e002      	b.n	800471e <HAL_GPIO_Init+0x1fa>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_GPIO_Init+0x1fa>
 800471c:	2300      	movs	r3, #0
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	f002 0203 	and.w	r2, r2, #3
 8004724:	0092      	lsls	r2, r2, #2
 8004726:	4093      	lsls	r3, r2
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800472e:	4937      	ldr	r1, [pc, #220]	@ (800480c <HAL_GPIO_Init+0x2e8>)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	089b      	lsrs	r3, r3, #2
 8004734:	3302      	adds	r3, #2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800473c:	4b39      	ldr	r3, [pc, #228]	@ (8004824 <HAL_GPIO_Init+0x300>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	43db      	mvns	r3, r3
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4013      	ands	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004760:	4a30      	ldr	r2, [pc, #192]	@ (8004824 <HAL_GPIO_Init+0x300>)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004766:	4b2f      	ldr	r3, [pc, #188]	@ (8004824 <HAL_GPIO_Init+0x300>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	43db      	mvns	r3, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4013      	ands	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800478a:	4a26      	ldr	r2, [pc, #152]	@ (8004824 <HAL_GPIO_Init+0x300>)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004790:	4b24      	ldr	r3, [pc, #144]	@ (8004824 <HAL_GPIO_Init+0x300>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	43db      	mvns	r3, r3
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4013      	ands	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004824 <HAL_GPIO_Init+0x300>)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004824 <HAL_GPIO_Init+0x300>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	43db      	mvns	r3, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4013      	ands	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047de:	4a11      	ldr	r2, [pc, #68]	@ (8004824 <HAL_GPIO_Init+0x300>)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	3301      	adds	r3, #1
 80047e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f47f ae9d 	bne.w	8004534 <HAL_GPIO_Init+0x10>
  }
}
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	40021000 	.word	0x40021000
 800480c:	40010000 	.word	0x40010000
 8004810:	48000400 	.word	0x48000400
 8004814:	48000800 	.word	0x48000800
 8004818:	48000c00 	.word	0x48000c00
 800481c:	48001000 	.word	0x48001000
 8004820:	48001400 	.word	0x48001400
 8004824:	40010400 	.word	0x40010400

08004828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	807b      	strh	r3, [r7, #2]
 8004834:	4613      	mov	r3, r2
 8004836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004838:	787b      	ldrb	r3, [r7, #1]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800483e:	887a      	ldrh	r2, [r7, #2]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004844:	e002      	b.n	800484c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004846:	887a      	ldrh	r2, [r7, #2]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800486a:	887a      	ldrh	r2, [r7, #2]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4013      	ands	r3, r2
 8004870:	041a      	lsls	r2, r3, #16
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	43d9      	mvns	r1, r3
 8004876:	887b      	ldrh	r3, [r7, #2]
 8004878:	400b      	ands	r3, r1
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004896:	4b08      	ldr	r3, [pc, #32]	@ (80048b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004898:	695a      	ldr	r2, [r3, #20]
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	4013      	ands	r3, r2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d006      	beq.n	80048b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048a2:	4a05      	ldr	r2, [pc, #20]	@ (80048b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fc f8ce 	bl	8000a4c <HAL_GPIO_EXTI_Callback>
  }
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40010400 	.word	0x40010400

080048bc <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e0be      	b.n	8004a4c <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2202      	movs	r2, #2
 80048d2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d02e      	beq.n	8004978 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a4d      	ldr	r2, [pc, #308]	@ (8004a54 <HAL_HRTIM_Init+0x198>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d10b      	bne.n	800493c <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004924:	4b4c      	ldr	r3, [pc, #304]	@ (8004a58 <HAL_HRTIM_Init+0x19c>)
 8004926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004928:	4a4b      	ldr	r2, [pc, #300]	@ (8004a58 <HAL_HRTIM_Init+0x19c>)
 800492a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800492e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004930:	4b49      	ldr	r3, [pc, #292]	@ (8004a58 <HAL_HRTIM_Init+0x19c>)
 8004932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004934:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800494a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004960:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7fc ff19 	bl	80017b0 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d012      	beq.n	80049b0 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004998:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80049c0:	2300      	movs	r3, #0
 80049c2:	75fb      	strb	r3, [r7, #23]
 80049c4:	e03e      	b.n	8004a44 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80049c6:	7dfa      	ldrb	r2, [r7, #23]
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	3318      	adds	r3, #24
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80049da:	7dfa      	ldrb	r2, [r7, #23]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	331c      	adds	r3, #28
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80049ee:	7dfa      	ldrb	r2, [r7, #23]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	3320      	adds	r3, #32
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004a02:	7dfa      	ldrb	r2, [r7, #23]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	3324      	adds	r3, #36	@ 0x24
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004a16:	7dfa      	ldrb	r2, [r7, #23]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	3328      	adds	r3, #40	@ 0x28
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004a2a:	7dfa      	ldrb	r2, [r7, #23]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	3330      	adds	r3, #48	@ 0x30
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
 8004a40:	3301      	adds	r3, #1
 8004a42:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
 8004a46:	2b06      	cmp	r3, #6
 8004a48:	d9bd      	bls.n	80049c6 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40016800 	.word	0x40016800
 8004a58:	40021000 	.word	0x40021000

08004a5c <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e045      	b.n	8004b00 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d114      	bne.n	8004ab6 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0202 	bic.w	r2, r2, #2
 8004a9c:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8004ab4:	e01f      	b.n	8004af6 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0202 	orr.w	r2, r2, #2
 8004ac6:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8004ad2:	f023 010c 	bic.w	r1, r3, #12
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8004b16:	f7fc ffd1 	bl	8001abc <HAL_GetTick>
 8004b1a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004b1c:	e014      	b.n	8004b48 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d010      	beq.n	8004b48 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fc ffc9 	bl	8001abc <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <HAL_HRTIM_PollForDLLCalibration+0x30>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d105      	bne.n	8004b48 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2207      	movs	r2, #7
 8004b40:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e011      	b.n	8004b6c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8004b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b58:	d1e1      	bne.n	8004b1e <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d101      	bne.n	8004b90 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e015      	b.n	8004bbc <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b06      	cmp	r3, #6
 8004b9c:	d104      	bne.n	8004ba8 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fe7c 	bl	800589e <HRTIM_MasterBase_Config>
 8004ba6:	e004      	b.n	8004bb2 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 fea5 	bl	80058fc <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef *pADCTriggerCfg)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d101      	bne.n	8004be0 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
    return HAL_BUSY;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e1d7      	b.n	8004f90 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e1d0      	b.n	8004f90 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8004c06:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8004c10:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c18:	f000 816d 	beq.w	8004ef6 <HAL_HRTIM_ADCTriggerConfig+0x332>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c22:	f200 818d 	bhi.w	8004f40 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c2c:	f000 813f 	beq.w	8004eae <HAL_HRTIM_ADCTriggerConfig+0x2ea>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c36:	f200 8183 	bhi.w	8004f40 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b80      	cmp	r3, #128	@ 0x80
 8004c3e:	f000 8111 	beq.w	8004e64 <HAL_HRTIM_ADCTriggerConfig+0x2a0>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b80      	cmp	r3, #128	@ 0x80
 8004c46:	f200 817b 	bhi.w	8004f40 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d84b      	bhi.n	8004ce8 <HAL_HRTIM_ADCTriggerConfig+0x124>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 8174 	beq.w	8004f40 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	2b1f      	cmp	r3, #31
 8004c5e:	f200 816f 	bhi.w	8004f40 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8004c62:	a201      	add	r2, pc, #4	@ (adr r2, 8004c68 <HAL_HRTIM_ADCTriggerConfig+0xa4>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004cf3 	.word	0x08004cf3
 8004c6c:	08004d17 	.word	0x08004d17
 8004c70:	08004f41 	.word	0x08004f41
 8004c74:	08004d3d 	.word	0x08004d3d
 8004c78:	08004f41 	.word	0x08004f41
 8004c7c:	08004f41 	.word	0x08004f41
 8004c80:	08004f41 	.word	0x08004f41
 8004c84:	08004d63 	.word	0x08004d63
 8004c88:	08004f41 	.word	0x08004f41
 8004c8c:	08004f41 	.word	0x08004f41
 8004c90:	08004f41 	.word	0x08004f41
 8004c94:	08004f41 	.word	0x08004f41
 8004c98:	08004f41 	.word	0x08004f41
 8004c9c:	08004f41 	.word	0x08004f41
 8004ca0:	08004f41 	.word	0x08004f41
 8004ca4:	08004d89 	.word	0x08004d89
 8004ca8:	08004f41 	.word	0x08004f41
 8004cac:	08004f41 	.word	0x08004f41
 8004cb0:	08004f41 	.word	0x08004f41
 8004cb4:	08004f41 	.word	0x08004f41
 8004cb8:	08004f41 	.word	0x08004f41
 8004cbc:	08004f41 	.word	0x08004f41
 8004cc0:	08004f41 	.word	0x08004f41
 8004cc4:	08004f41 	.word	0x08004f41
 8004cc8:	08004f41 	.word	0x08004f41
 8004ccc:	08004f41 	.word	0x08004f41
 8004cd0:	08004f41 	.word	0x08004f41
 8004cd4:	08004f41 	.word	0x08004f41
 8004cd8:	08004f41 	.word	0x08004f41
 8004cdc:	08004f41 	.word	0x08004f41
 8004ce0:	08004f41 	.word	0x08004f41
 8004ce4:	08004dd1 	.word	0x08004dd1
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b40      	cmp	r3, #64	@ 0x40
 8004cec:	f000 8095 	beq.w	8004e1a <HAL_HRTIM_ADCTriggerConfig+0x256>
 8004cf0:	e126      	b.n	8004f40 <HAL_HRTIM_ADCTriggerConfig+0x37c>
  {
    case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004cf8:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6852      	ldr	r2, [r2, #4]
 8004d10:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
      break;
 8004d14:	e11d      	b.n	8004f52 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 8004d1c:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6852      	ldr	r2, [r2, #4]
 8004d36:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
      break;
 8004d3a:	e10a      	b.n	8004f52 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8004d42:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	019b      	lsls	r3, r3, #6
 8004d4a:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6852      	ldr	r2, [r2, #4]
 8004d5c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
      break;
 8004d60:	e0f7      	b.n	8004f52 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8004d68:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	025b      	lsls	r3, r3, #9
 8004d70:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6852      	ldr	r2, [r2, #4]
 8004d82:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
      break;
 8004d86:	e0e4      	b.n	8004f52 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f023 0307 	bic.w	r3, r3, #7
 8004d8e:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	0c1b      	lsrs	r3, r3, #16
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 021f 	bic.w	r2, r2, #31
 8004db0:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 021f 	and.w	r2, r3, #31
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8004dce:	e0c0      	b.n	8004f52 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd6:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	0b1b      	lsrs	r3, r3, #12
 8004dde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8004df8:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	015b      	lsls	r3, r3, #5
 8004e0a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8004e18:	e09b      	b.n	8004f52 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004e20:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	0a1b      	lsrs	r3, r3, #8
 8004e28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8004e42:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	029b      	lsls	r3, r3, #10
 8004e54:	f403 42f8 	and.w	r2, r3, #31744	@ 0x7c00
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8004e62:	e076      	b.n	8004f52 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e6a:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8004e8c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	041b      	lsls	r3, r3, #16
 8004e9e:	f403 12f8 	and.w	r2, r3, #2031616	@ 0x1f0000
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8004eac:	e051      	b.n	8004f52 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004eb4:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 7278 	bic.w	r2, r2, #65011712	@ 0x3e00000
 8004ed4:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	055b      	lsls	r3, r3, #21
 8004ee6:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8004ef4:	e02d      	b.n	8004f52 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004efc:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8004f1e:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	069b      	lsls	r3, r3, #26
 8004f30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8004f3e:	e008      	b.n	8004f52 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2207      	movs	r2, #7
 8004f44:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 8004f50:	bf00      	nop
    }
  }

  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b07      	cmp	r3, #7
 8004f5c:	d101      	bne.n	8004f62 <HAL_HRTIM_ADCTriggerConfig+0x39e>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e016      	b.n	8004f90 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b0f      	cmp	r3, #15
 8004f66:	d805      	bhi.n	8004f74 <HAL_HRTIM_ADCTriggerConfig+0x3b0>
  {
    hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
 8004f72:	e004      	b.n	8004f7e <HAL_HRTIM_ADCTriggerConfig+0x3ba>
  }
  else
  {
    hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t ADCTrigger,
                                                uint32_t Postscaler)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d101      	bne.n	8004fb8 <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
    return HAL_BUSY;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e135      	b.n	8005224 <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e12e      	b.n	8005224 <HAL_HRTIM_ADCPostScalerConfig+0x288>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  switch (ADCTrigger)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fdc:	f000 80f8 	beq.w	80051d0 <HAL_HRTIM_ADCPostScalerConfig+0x234>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe6:	f200 8103 	bhi.w	80051f0 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ff0:	f000 80de 	beq.w	80051b0 <HAL_HRTIM_ADCPostScalerConfig+0x214>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ffa:	f200 80f9 	bhi.w	80051f0 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b80      	cmp	r3, #128	@ 0x80
 8005002:	f000 80c5 	beq.w	8005190 <HAL_HRTIM_ADCPostScalerConfig+0x1f4>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b80      	cmp	r3, #128	@ 0x80
 800500a:	f200 80f1 	bhi.w	80051f0 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b20      	cmp	r3, #32
 8005012:	d84b      	bhi.n	80050ac <HAL_HRTIM_ADCPostScalerConfig+0x110>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80ea 	beq.w	80051f0 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	3b01      	subs	r3, #1
 8005020:	2b1f      	cmp	r3, #31
 8005022:	f200 80e5 	bhi.w	80051f0 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005026:	a201      	add	r2, pc, #4	@ (adr r2, 800502c <HAL_HRTIM_ADCPostScalerConfig+0x90>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	080050b5 	.word	0x080050b5
 8005030:	080050d3 	.word	0x080050d3
 8005034:	080051f1 	.word	0x080051f1
 8005038:	080050f3 	.word	0x080050f3
 800503c:	080051f1 	.word	0x080051f1
 8005040:	080051f1 	.word	0x080051f1
 8005044:	080051f1 	.word	0x080051f1
 8005048:	08005113 	.word	0x08005113
 800504c:	080051f1 	.word	0x080051f1
 8005050:	080051f1 	.word	0x080051f1
 8005054:	080051f1 	.word	0x080051f1
 8005058:	080051f1 	.word	0x080051f1
 800505c:	080051f1 	.word	0x080051f1
 8005060:	080051f1 	.word	0x080051f1
 8005064:	080051f1 	.word	0x080051f1
 8005068:	08005133 	.word	0x08005133
 800506c:	080051f1 	.word	0x080051f1
 8005070:	080051f1 	.word	0x080051f1
 8005074:	080051f1 	.word	0x080051f1
 8005078:	080051f1 	.word	0x080051f1
 800507c:	080051f1 	.word	0x080051f1
 8005080:	080051f1 	.word	0x080051f1
 8005084:	080051f1 	.word	0x080051f1
 8005088:	080051f1 	.word	0x080051f1
 800508c:	080051f1 	.word	0x080051f1
 8005090:	080051f1 	.word	0x080051f1
 8005094:	080051f1 	.word	0x080051f1
 8005098:	080051f1 	.word	0x080051f1
 800509c:	080051f1 	.word	0x080051f1
 80050a0:	080051f1 	.word	0x080051f1
 80050a4:	080051f1 	.word	0x080051f1
 80050a8:	08005153 	.word	0x08005153
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b40      	cmp	r3, #64	@ 0x40
 80050b0:	d05e      	beq.n	8005170 <HAL_HRTIM_ADCPostScalerConfig+0x1d4>
 80050b2:	e09d      	b.n	80051f0 <HAL_HRTIM_ADCPostScalerConfig+0x254>
  {
    case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80050bc:	f023 011f 	bic.w	r1, r3, #31
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f003 021f 	and.w	r2, r3, #31
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80050d0:	e097      	b.n	8005202 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80050da:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	019b      	lsls	r3, r3, #6
 80050e2:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80050f0:	e087      	b.n	8005202 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80050fa:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	031b      	lsls	r3, r3, #12
 8005102:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8005110:	e077      	b.n	8005202 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800511a:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	049b      	lsls	r3, r3, #18
 8005122:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8005130:	e067      	b.n	8005202 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800513a:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	061b      	lsls	r3, r3, #24
 8005142:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8005150:	e057      	b.n	8005202 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800515a:	f023 011f 	bic.w	r1, r3, #31
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f003 021f 	and.w	r2, r3, #31
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 800516e:	e048      	b.n	8005202 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8005178:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	019b      	lsls	r3, r3, #6
 8005180:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 800518e:	e038      	b.n	8005202 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8005198:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	031b      	lsls	r3, r3, #12
 80051a0:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80051ae:	e028      	b.n	8005202 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80051b8:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	049b      	lsls	r3, r3, #18
 80051c0:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80051ce:	e018      	b.n	8005202 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80051d8:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	061b      	lsls	r3, r3, #24
 80051e0:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80051ee:	e008      	b.n	8005202 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2207      	movs	r2, #7
 80051f4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 8005200:	bf00      	nop
    }
  }

  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b07      	cmp	r3, #7
 800520c:	d101      	bne.n	8005212 <HAL_HRTIM_ADCPostScalerConfig+0x276>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e008      	b.n	8005224 <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d101      	bne.n	800524c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
 800524a:	e07a      	b.n	8005342 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8005256:	2302      	movs	r3, #2
 8005258:	e073      	b.n	8005342 <HAL_HRTIM_WaveformTimerConfig+0x112>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2202      	movs	r2, #2
 8005266:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b06      	cmp	r3, #6
 800526e:	d104      	bne.n	800527a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fb82 	bl	800597c <HRTIM_MasterWaveform_Config>
 8005278:	e004      	b.n	8005284 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 fc1a 	bl	8005ab8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6819      	ldr	r1, [r3, #0]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4613      	mov	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4403      	add	r3, r0
 8005296:	3320      	adds	r3, #32
 8005298:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6859      	ldr	r1, [r3, #4]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4403      	add	r3, r0
 80052ac:	3324      	adds	r3, #36	@ 0x24
 80052ae:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6899      	ldr	r1, [r3, #8]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4613      	mov	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4403      	add	r3, r0
 80052c2:	3328      	adds	r3, #40	@ 0x28
 80052c4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68d9      	ldr	r1, [r3, #12]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	4613      	mov	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4403      	add	r3, r0
 80052d8:	332c      	adds	r3, #44	@ 0x2c
 80052da:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6919      	ldr	r1, [r3, #16]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4403      	add	r3, r0
 80052ee:	3330      	adds	r3, #48	@ 0x30
 80052f0:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 fead 	bl	8006054 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b06      	cmp	r3, #6
 80052fe:	d017      	beq.n	8005330 <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005304:	2b00      	cmp	r3, #0
 8005306:	d113      	bne.n	8005330 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	3301      	adds	r3, #1
 8005310:	01db      	lsls	r3, r3, #7
 8005312:	4413      	add	r3, r2
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800531e:	025b      	lsls	r3, r3, #9
 8005320:	68f9      	ldr	r1, [r7, #12]
 8005322:	6809      	ldr	r1, [r1, #0]
 8005324:	431a      	orrs	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	3301      	adds	r3, #1
 800532a:	01db      	lsls	r3, r3, #7
 800532c:	440b      	add	r3, r1
 800532e:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d101      	bne.n	8005366 <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
 8005364:	e020      	b.n	80053a8 <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8005370:	2302      	movs	r3, #2
 8005372:	e019      	b.n	80053a8 <HAL_HRTIM_WaveformTimerControl+0x5e>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 fd1b 	bl	8005dc4 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 fe5f 	bl	8006054 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_DeadTimeCfgTypeDef *pDeadTimeCfg)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d101      	bne.n	80053cc <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
    return HAL_BUSY;
 80053c8:	2302      	movs	r3, #2
 80053ca:	e067      	b.n	800549c <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_HRTIM_DeadTimeConfig+0x2a>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e060      	b.n	800549c <HAL_HRTIM_DeadTimeConfig+0xec>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80053f2:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	041a      	lsls	r2, r3, #16
 8005432:	4b1d      	ldr	r3, [pc, #116]	@ (80054a8 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8005434:	4013      	ands	r3, r2
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	01db      	lsls	r3, r3, #7
 800546e:	4413      	add	r3, r2
 8005470:	33b8      	adds	r3, #184	@ 0xb8
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4b0d      	ldr	r3, [pc, #52]	@ (80054ac <HAL_HRTIM_DeadTimeConfig+0xfc>)
 8005476:	4013      	ands	r3, r2
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	6811      	ldr	r1, [r2, #0]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	431a      	orrs	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	01db      	lsls	r3, r3, #7
 8005484:	440b      	add	r3, r1
 8005486:	33b8      	adds	r3, #184	@ 0xb8
 8005488:	601a      	str	r2, [r3, #0]
               HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
               HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
               HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	01ff0000 	.word	0x01ff0000
 80054ac:	3c002000 	.word	0x3c002000

080054b0 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef *pCompareCfg)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d101      	bne.n	80054ce <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
    return HAL_BUSY;
 80054ca:	2302      	movs	r3, #2
 80054cc:	e157      	b.n	800577e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80054d8:	2302      	movs	r3, #2
 80054da:	e150      	b.n	800577e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b06      	cmp	r3, #6
 80054f0:	d140      	bne.n	8005574 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3b01      	subs	r3, #1
 80054f6:	2b07      	cmp	r3, #7
 80054f8:	d82a      	bhi.n	8005550 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80054fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005500 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	08005521 	.word	0x08005521
 8005504:	0800552d 	.word	0x0800552d
 8005508:	08005551 	.word	0x08005551
 800550c:	08005539 	.word	0x08005539
 8005510:	08005551 	.word	0x08005551
 8005514:	08005551 	.word	0x08005551
 8005518:	08005551 	.word	0x08005551
 800551c:	08005545 	.word	0x08005545
    {
      case HRTIM_COMPAREUNIT_1:
      {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	61da      	str	r2, [r3, #28]
        break;
 800552a:	e01a      	b.n	8005562 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_2:
      {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8005536:	e014      	b.n	8005562 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8005542:	e00e      	b.n	8005562 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_4:
      {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	6812      	ldr	r2, [r2, #0]
 800554c:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800554e:	e008      	b.n	8005562 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2207      	movs	r2, #7
 8005554:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8005560:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b07      	cmp	r3, #7
 800556c:	f040 80fe 	bne.w	800576c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e104      	b.n	800577e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3b01      	subs	r3, #1
 8005578:	2b07      	cmp	r3, #7
 800557a:	f200 80e3 	bhi.w	8005744 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800557e:	a201      	add	r2, pc, #4	@ (adr r2, 8005584 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	080055a5 	.word	0x080055a5
 8005588:	080055b9 	.word	0x080055b9
 800558c:	08005745 	.word	0x08005745
 8005590:	08005675 	.word	0x08005675
 8005594:	08005745 	.word	0x08005745
 8005598:	08005745 	.word	0x08005745
 800559c:	08005745 	.word	0x08005745
 80055a0:	08005689 	.word	0x08005689
    {
      case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6819      	ldr	r1, [r3, #0]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	01db      	lsls	r3, r3, #7
 80055b0:	440b      	add	r3, r1
 80055b2:	339c      	adds	r3, #156	@ 0x9c
 80055b4:	601a      	str	r2, [r3, #0]
        break;
 80055b6:	e0d1      	b.n	800575c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6819      	ldr	r1, [r3, #0]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	01db      	lsls	r3, r3, #7
 80055c4:	440b      	add	r3, r1
 80055c6:	33a4      	adds	r3, #164	@ 0xa4
 80055c8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d03f      	beq.n	8005652 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	3301      	adds	r3, #1
 80055da:	01db      	lsls	r3, r3, #7
 80055dc:	4413      	add	r3, r2
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	6811      	ldr	r1, [r2, #0]
 80055e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	3301      	adds	r3, #1
 80055ec:	01db      	lsls	r3, r3, #7
 80055ee:	440b      	add	r3, r1
 80055f0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	3301      	adds	r3, #1
 80055fa:	01db      	lsls	r3, r3, #7
 80055fc:	4413      	add	r3, r2
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	68f9      	ldr	r1, [r7, #12]
 8005606:	6809      	ldr	r1, [r1, #0]
 8005608:	431a      	orrs	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	3301      	adds	r3, #1
 800560e:	01db      	lsls	r3, r3, #7
 8005610:	440b      	add	r3, r1
 8005612:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800561c:	d109      	bne.n	8005632 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6819      	ldr	r1, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	01db      	lsls	r3, r3, #7
 800562a:	440b      	add	r3, r1
 800562c:	339c      	adds	r3, #156	@ 0x9c
 800562e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
        break;
 8005630:	e091      	b.n	8005756 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800563a:	f040 808c 	bne.w	8005756 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6819      	ldr	r1, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	01db      	lsls	r3, r3, #7
 800564a:	440b      	add	r3, r1
 800564c:	33a8      	adds	r3, #168	@ 0xa8
 800564e:	601a      	str	r2, [r3, #0]
        break;
 8005650:	e081      	b.n	8005756 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	3301      	adds	r3, #1
 800565a:	01db      	lsls	r3, r3, #7
 800565c:	4413      	add	r3, r2
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	6811      	ldr	r1, [r2, #0]
 8005664:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	3301      	adds	r3, #1
 800566c:	01db      	lsls	r3, r3, #7
 800566e:	440b      	add	r3, r1
 8005670:	601a      	str	r2, [r3, #0]
        break;
 8005672:	e070      	b.n	8005756 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6819      	ldr	r1, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	01db      	lsls	r3, r3, #7
 8005680:	440b      	add	r3, r1
 8005682:	33a8      	adds	r3, #168	@ 0xa8
 8005684:	601a      	str	r2, [r3, #0]
        break;
 8005686:	e069      	b.n	800575c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6819      	ldr	r1, [r3, #0]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	01db      	lsls	r3, r3, #7
 8005694:	440b      	add	r3, r1
 8005696:	33ac      	adds	r3, #172	@ 0xac
 8005698:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d03f      	beq.n	8005722 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	3301      	adds	r3, #1
 80056aa:	01db      	lsls	r3, r3, #7
 80056ac:	4413      	add	r3, r2
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	6811      	ldr	r1, [r2, #0]
 80056b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	3301      	adds	r3, #1
 80056bc:	01db      	lsls	r3, r3, #7
 80056be:	440b      	add	r3, r1
 80056c0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	3301      	adds	r3, #1
 80056ca:	01db      	lsls	r3, r3, #7
 80056cc:	4413      	add	r3, r2
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	6809      	ldr	r1, [r1, #0]
 80056da:	431a      	orrs	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	3301      	adds	r3, #1
 80056e0:	01db      	lsls	r3, r3, #7
 80056e2:	440b      	add	r3, r1
 80056e4:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ee:	d109      	bne.n	8005704 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6819      	ldr	r1, [r3, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	01db      	lsls	r3, r3, #7
 80056fc:	440b      	add	r3, r1
 80056fe:	339c      	adds	r3, #156	@ 0x9c
 8005700:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
        break;
 8005702:	e02a      	b.n	800575a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800570c:	d125      	bne.n	800575a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6819      	ldr	r1, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	01db      	lsls	r3, r3, #7
 800571a:	440b      	add	r3, r1
 800571c:	33a8      	adds	r3, #168	@ 0xa8
 800571e:	601a      	str	r2, [r3, #0]
        break;
 8005720:	e01b      	b.n	800575a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3301      	adds	r3, #1
 800572a:	01db      	lsls	r3, r3, #7
 800572c:	4413      	add	r3, r2
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	6811      	ldr	r1, [r2, #0]
 8005734:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	3301      	adds	r3, #1
 800573c:	01db      	lsls	r3, r3, #7
 800573e:	440b      	add	r3, r1
 8005740:	601a      	str	r2, [r3, #0]
        break;
 8005742:	e00a      	b.n	800575a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2207      	movs	r2, #7
 8005748:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8005754:	e002      	b.n	800575c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 800575a:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b07      	cmp	r3, #7
 8005766:	d101      	bne.n	800576c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e008      	b.n	800577e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop

0800578c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d101      	bne.n	80057aa <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 80057a6:	2302      	movs	r3, #2
 80057a8:	e01d      	b.n	80057e6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e016      	b.n	80057e6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fb58 	bl	8005e84 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t OutputsToStart)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_HRTIM_WaveformOutputStart+0x18>
 8005802:	2302      	movs	r3, #2
 8005804:	e01a      	b.n	800583c <HAL_HRTIM_WaveformOutputStart+0x4e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef *hhrtim,
                                               uint32_t Timers)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_HRTIM_WaveformCountStart+0x18>
 800585c:	2302      	movs	r3, #2
 800585e:	e018      	b.n	8005892 <HAL_HRTIM_WaveformCountStart+0x4a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0307 	bic.w	r3, r3, #7
 80058b6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f023 0318 	bic.w	r3, r3, #24
 80058c8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	6852      	ldr	r2, [r2, #4]
 80058ee:	619a      	str	r2, [r3, #24]
}
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	3301      	adds	r3, #1
 8005910:	01db      	lsls	r3, r3, #7
 8005912:	4413      	add	r3, r2
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0307 	bic.w	r3, r3, #7
 800591e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f023 0318 	bic.w	r3, r3, #24
 8005930:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	3301      	adds	r3, #1
 8005944:	01db      	lsls	r3, r3, #7
 8005946:	4413      	add	r3, r2
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6819      	ldr	r1, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	01db      	lsls	r3, r3, #7
 8005958:	440b      	add	r3, r1
 800595a:	3394      	adds	r3, #148	@ 0x94
 800595c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6819      	ldr	r1, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	01db      	lsls	r3, r3, #7
 800596a:	440b      	add	r3, r1
 800596c:	3398      	adds	r3, #152	@ 0x98
 800596e:	601a      	str	r2, [r3, #0]
}
 8005970:	bf00      	nop
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005996:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80059b0:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	d003      	beq.n	80059c2 <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d108      	bne.n	80059d4 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80059c8:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f043 0320 	orr.w	r3, r3, #32
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	e021      	b.n	8005a18 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d108      	bne.n	80059ee <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e2:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	e014      	b.n	8005a18 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d108      	bne.n	8005a08 <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059fc:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	e007      	b.n	8005a18 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0320 	bic.w	r3, r3, #32
 8005a0e:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a16:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a1e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a30:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a42:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005a54:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005a66:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a7a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a8c:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b08b      	sub	sp, #44	@ 0x2c
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	3301      	adds	r3, #1
 8005acc:	01db      	lsls	r3, r3, #7
 8005ace:	4413      	add	r3, r2
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	6811      	ldr	r1, [r2, #0]
 8005ad6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	3301      	adds	r3, #1
 8005ade:	01db      	lsls	r3, r3, #7
 8005ae0:	440b      	add	r3, r1
 8005ae2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	3301      	adds	r3, #1
 8005aec:	01db      	lsls	r3, r3, #7
 8005aee:	4413      	add	r3, r2
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	01db      	lsls	r3, r3, #7
 8005afc:	4413      	add	r3, r2
 8005afe:	33e8      	adds	r3, #232	@ 0xe8
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	01db      	lsls	r3, r3, #7
 8005b0c:	4413      	add	r3, r2
 8005b0e:	33e4      	adds	r3, #228	@ 0xe4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005b1c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	f023 0320 	bic.w	r3, r3, #32
 8005b24:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d003      	beq.n	8005b40 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d108      	bne.n	8005b52 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8005b46:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8005b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4a:	f043 0320 	orr.w	r3, r3, #32
 8005b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b50:	e021      	b.n	8005b96 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d108      	bne.n	8005b6c <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b60:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b6a:	e014      	b.n	8005b96 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d108      	bne.n	8005b86 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b84:	e007      	b.n	8005b96 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	f023 0320 	bic.w	r3, r3, #32
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8005b94:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8005b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005be4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bec:	4313      	orrs	r3, r2
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c00:	d103      	bne.n	8005c0a <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c10:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8005c34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c38:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c40:	4313      	orrs	r3, r2
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c4a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c60:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c72:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c78:	6a3a      	ldr	r2, [r7, #32]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c82:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8005c86:	d004      	beq.n	8005c92 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c8c:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8005c90:	d103      	bne.n	8005c9a <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c96:	2b40      	cmp	r3, #64	@ 0x40
 8005c98:	d108      	bne.n	8005cac <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8005ca0:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca6:	6a3a      	ldr	r2, [r7, #32]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cb2:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb8:	6a3a      	ldr	r2, [r7, #32]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b05      	cmp	r3, #5
 8005cc8:	d850      	bhi.n	8005d6c <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8005cca:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd0 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005ce9 	.word	0x08005ce9
 8005cd4:	08005cff 	.word	0x08005cff
 8005cd8:	08005d15 	.word	0x08005d15
 8005cdc:	08005d2b 	.word	0x08005d2b
 8005ce0:	08005d41 	.word	0x08005d41
 8005ce4:	08005d57 	.word	0x08005d57
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005cee:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61fb      	str	r3, [r7, #28]
      break;
 8005cfc:	e037      	b.n	8005d6e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d04:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	61fb      	str	r3, [r7, #28]
      break;
 8005d12:	e02c      	b.n	8005d6e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005d1a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	61fb      	str	r3, [r7, #28]
      break;
 8005d28:	e021      	b.n	8005d6e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005d30:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	61fb      	str	r3, [r7, #28]
      break;
 8005d3e:	e016      	b.n	8005d6e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d46:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4c:	015b      	lsls	r3, r3, #5
 8005d4e:	69fa      	ldr	r2, [r7, #28]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61fb      	str	r3, [r7, #28]
      break;
 8005d54:	e00b      	b.n	8005d6e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005d5c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d62:	019b      	lsls	r3, r3, #6
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61fb      	str	r3, [r7, #28]
      break;
 8005d6a:	e000      	b.n	8005d6e <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 8005d6c:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	3301      	adds	r3, #1
 8005d76:	01db      	lsls	r3, r3, #7
 8005d78:	4413      	add	r3, r2
 8005d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d7c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	01db      	lsls	r3, r3, #7
 8005d86:	4413      	add	r3, r2
 8005d88:	33e8      	adds	r3, #232	@ 0xe8
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	01db      	lsls	r3, r3, #7
 8005d96:	4413      	add	r3, r2
 8005d98:	33e4      	adds	r3, #228	@ 0xe4
 8005d9a:	6a3a      	ldr	r2, [r7, #32]
 8005d9c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	01db      	lsls	r3, r3, #7
 8005da6:	4413      	add	r3, r2
 8005da8:	33d4      	adds	r3, #212	@ 0xd4
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8005db8:	bf00      	nop
 8005dba:	372c      	adds	r7, #44	@ 0x2c
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	01db      	lsls	r3, r3, #7
 8005dd8:	4413      	add	r3, r2
 8005dda:	33ec      	adds	r3, #236	@ 0xec
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f023 0310 	bic.w	r3, r3, #16
 8005de6:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005dfa:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e0c:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005e1e:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d11a      	bne.n	8005e68 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 0304 	bic.w	r3, r3, #4
 8005e38:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f023 0302 	bic.w	r3, r3, #2
 8005e4a:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 0301 	bic.w	r3, r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	01db      	lsls	r3, r3, #7
 8005e70:	4413      	add	r3, r2
 8005e72:	33ec      	adds	r3, #236	@ 0xec
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	601a      	str	r2, [r3, #0]

}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b089      	sub	sp, #36	@ 0x24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	01db      	lsls	r3, r3, #7
 8005e9e:	4413      	add	r3, r2
 8005ea0:	33e4      	adds	r3, #228	@ 0xe4
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	01db      	lsls	r3, r3, #7
 8005eae:	4413      	add	r3, r2
 8005eb0:	33b8      	adds	r3, #184	@ 0xb8
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	617b      	str	r3, [r7, #20]

  switch (Output)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ebc:	d05d      	beq.n	8005f7a <HRTIM_OutputConfig+0xf6>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ec4:	d86e      	bhi.n	8005fa4 <HRTIM_OutputConfig+0x120>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ecc:	d042      	beq.n	8005f54 <HRTIM_OutputConfig+0xd0>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ed4:	d866      	bhi.n	8005fa4 <HRTIM_OutputConfig+0x120>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005edc:	d04d      	beq.n	8005f7a <HRTIM_OutputConfig+0xf6>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee4:	d85e      	bhi.n	8005fa4 <HRTIM_OutputConfig+0x120>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eec:	d032      	beq.n	8005f54 <HRTIM_OutputConfig+0xd0>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ef4:	d856      	bhi.n	8005fa4 <HRTIM_OutputConfig+0x120>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b80      	cmp	r3, #128	@ 0x80
 8005efa:	d03e      	beq.n	8005f7a <HRTIM_OutputConfig+0xf6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b80      	cmp	r3, #128	@ 0x80
 8005f00:	d850      	bhi.n	8005fa4 <HRTIM_OutputConfig+0x120>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b40      	cmp	r3, #64	@ 0x40
 8005f06:	d025      	beq.n	8005f54 <HRTIM_OutputConfig+0xd0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b40      	cmp	r3, #64	@ 0x40
 8005f0c:	d84a      	bhi.n	8005fa4 <HRTIM_OutputConfig+0x120>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d01f      	beq.n	8005f54 <HRTIM_OutputConfig+0xd0>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d044      	beq.n	8005fa4 <HRTIM_OutputConfig+0x120>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d841      	bhi.n	8005fa4 <HRTIM_OutputConfig+0x120>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d33e      	bcc.n	8005fa4 <HRTIM_OutputConfig+0x120>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3b02      	subs	r3, #2
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	409a      	lsls	r2, r3
 8005f2e:	4b48      	ldr	r3, [pc, #288]	@ (8006050 <HRTIM_OutputConfig+0x1cc>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bf14      	ite	ne
 8005f36:	2301      	movne	r3, #1
 8005f38:	2300      	moveq	r3, #0
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d11c      	bne.n	8005f7a <HRTIM_OutputConfig+0xf6>
 8005f40:	f244 0304 	movw	r3, #16388	@ 0x4004
 8005f44:	4013      	ands	r3, r2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bf14      	ite	ne
 8005f4a:	2301      	movne	r3, #1
 8005f4c:	2300      	moveq	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d027      	beq.n	8005fa4 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6819      	ldr	r1, [r3, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	01db      	lsls	r3, r3, #7
 8005f60:	440b      	add	r3, r1
 8005f62:	33bc      	adds	r3, #188	@ 0xbc
 8005f64:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6819      	ldr	r1, [r3, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	01db      	lsls	r3, r3, #7
 8005f72:	440b      	add	r3, r1
 8005f74:	33c0      	adds	r3, #192	@ 0xc0
 8005f76:	601a      	str	r2, [r3, #0]
      break;
 8005f78:	e015      	b.n	8005fa6 <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6819      	ldr	r1, [r3, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	01db      	lsls	r3, r3, #7
 8005f86:	440b      	add	r3, r1
 8005f88:	33c4      	adds	r3, #196	@ 0xc4
 8005f8a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6819      	ldr	r1, [r3, #0]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	01db      	lsls	r3, r3, #7
 8005f98:	440b      	add	r3, r1
 8005f9a:	33c8      	adds	r3, #200	@ 0xc8
 8005f9c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8005f9e:	2310      	movs	r3, #16
 8005fa0:	61bb      	str	r3, [r7, #24]
      break;
 8005fa2:	e000      	b.n	8005fa6 <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 8005fa4:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8005fa6:	22fe      	movs	r2, #254	@ 0xfe
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	695a      	ldr	r2, [r3, #20]
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	4313      	orrs	r3, r2
 8006004:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b08      	cmp	r3, #8
 800600c:	d111      	bne.n	8006032 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10c      	bne.n	8006032 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800601e:	2b00      	cmp	r3, #0
 8006020:	d107      	bne.n	8006032 <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	69da      	ldr	r2, [r3, #28]
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	4313      	orrs	r3, r2
 8006030:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	01db      	lsls	r3, r3, #7
 800603a:	4413      	add	r3, r2
 800603c:	33e4      	adds	r3, #228	@ 0xe4
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	601a      	str	r2, [r3, #0]
}
 8006042:	bf00      	nop
 8006044:	3724      	adds	r7, #36	@ 0x24
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	40000041 	.word	0x40000041

08006054 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b06      	cmp	r3, #6
 8006062:	d85e      	bhi.n	8006122 <HRTIM_ForceRegistersUpdate+0xce>
 8006064:	a201      	add	r2, pc, #4	@ (adr r2, 800606c <HRTIM_ForceRegistersUpdate+0x18>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	0800609f 	.word	0x0800609f
 8006070:	080060b5 	.word	0x080060b5
 8006074:	080060cb 	.word	0x080060cb
 8006078:	080060e1 	.word	0x080060e1
 800607c:	080060f7 	.word	0x080060f7
 8006080:	0800610d 	.word	0x0800610d
 8006084:	08006089 	.word	0x08006089
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0201 	orr.w	r2, r2, #1
 8006098:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800609c:	e042      	b.n	8006124 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0202 	orr.w	r2, r2, #2
 80060ae:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80060b2:	e037      	b.n	8006124 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0204 	orr.w	r2, r2, #4
 80060c4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80060c8:	e02c      	b.n	8006124 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0208 	orr.w	r2, r2, #8
 80060da:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80060de:	e021      	b.n	8006124 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0210 	orr.w	r2, r2, #16
 80060f0:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80060f4:	e016      	b.n	8006124 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0220 	orr.w	r2, r2, #32
 8006106:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800610a:	e00b      	b.n	8006124 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800611c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006120:	e000      	b.n	8006124 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 8006122:	bf00      	nop
  }
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d141      	bne.n	80061c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800613e:	4b4b      	ldr	r3, [pc, #300]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800614a:	d131      	bne.n	80061b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800614c:	4b47      	ldr	r3, [pc, #284]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800614e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006152:	4a46      	ldr	r2, [pc, #280]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006158:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800615c:	4b43      	ldr	r3, [pc, #268]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006164:	4a41      	ldr	r2, [pc, #260]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006166:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800616a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800616c:	4b40      	ldr	r3, [pc, #256]	@ (8006270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2232      	movs	r2, #50	@ 0x32
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	4a3f      	ldr	r2, [pc, #252]	@ (8006274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006178:	fba2 2303 	umull	r2, r3, r2, r3
 800617c:	0c9b      	lsrs	r3, r3, #18
 800617e:	3301      	adds	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006182:	e002      	b.n	800618a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3b01      	subs	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800618a:	4b38      	ldr	r3, [pc, #224]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006196:	d102      	bne.n	800619e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f2      	bne.n	8006184 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800619e:	4b33      	ldr	r3, [pc, #204]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061aa:	d158      	bne.n	800625e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e057      	b.n	8006260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061b0:	4b2e      	ldr	r3, [pc, #184]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061b6:	4a2d      	ldr	r2, [pc, #180]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80061c0:	e04d      	b.n	800625e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061c8:	d141      	bne.n	800624e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061ca:	4b28      	ldr	r3, [pc, #160]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d6:	d131      	bne.n	800623c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061d8:	4b24      	ldr	r3, [pc, #144]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061de:	4a23      	ldr	r2, [pc, #140]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061e8:	4b20      	ldr	r3, [pc, #128]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061f0:	4a1e      	ldr	r2, [pc, #120]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2232      	movs	r2, #50	@ 0x32
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	4a1c      	ldr	r2, [pc, #112]	@ (8006274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006204:	fba2 2303 	umull	r2, r3, r2, r3
 8006208:	0c9b      	lsrs	r3, r3, #18
 800620a:	3301      	adds	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800620e:	e002      	b.n	8006216 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3b01      	subs	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006216:	4b15      	ldr	r3, [pc, #84]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800621e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006222:	d102      	bne.n	800622a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f2      	bne.n	8006210 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800622a:	4b10      	ldr	r3, [pc, #64]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006236:	d112      	bne.n	800625e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e011      	b.n	8006260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800623c:	4b0b      	ldr	r3, [pc, #44]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800623e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006242:	4a0a      	ldr	r2, [pc, #40]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006248:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800624c:	e007      	b.n	800625e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800624e:	4b07      	ldr	r3, [pc, #28]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006256:	4a05      	ldr	r2, [pc, #20]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006258:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800625c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	40007000 	.word	0x40007000
 8006270:	20000014 	.word	0x20000014
 8006274:	431bde83 	.word	0x431bde83

08006278 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800627c:	4b05      	ldr	r3, [pc, #20]	@ (8006294 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	4a04      	ldr	r2, [pc, #16]	@ (8006294 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006286:	6093      	str	r3, [r2, #8]
}
 8006288:	bf00      	nop
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40007000 	.word	0x40007000

08006298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e2fe      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d075      	beq.n	80063a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062b6:	4b97      	ldr	r3, [pc, #604]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 030c 	and.w	r3, r3, #12
 80062be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062c0:	4b94      	ldr	r3, [pc, #592]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0303 	and.w	r3, r3, #3
 80062c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b0c      	cmp	r3, #12
 80062ce:	d102      	bne.n	80062d6 <HAL_RCC_OscConfig+0x3e>
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d002      	beq.n	80062dc <HAL_RCC_OscConfig+0x44>
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d10b      	bne.n	80062f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062dc:	4b8d      	ldr	r3, [pc, #564]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d05b      	beq.n	80063a0 <HAL_RCC_OscConfig+0x108>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d157      	bne.n	80063a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e2d9      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062fc:	d106      	bne.n	800630c <HAL_RCC_OscConfig+0x74>
 80062fe:	4b85      	ldr	r3, [pc, #532]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a84      	ldr	r2, [pc, #528]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	e01d      	b.n	8006348 <HAL_RCC_OscConfig+0xb0>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006314:	d10c      	bne.n	8006330 <HAL_RCC_OscConfig+0x98>
 8006316:	4b7f      	ldr	r3, [pc, #508]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a7e      	ldr	r2, [pc, #504]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 800631c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	4b7c      	ldr	r3, [pc, #496]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a7b      	ldr	r2, [pc, #492]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	e00b      	b.n	8006348 <HAL_RCC_OscConfig+0xb0>
 8006330:	4b78      	ldr	r3, [pc, #480]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a77      	ldr	r2, [pc, #476]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	4b75      	ldr	r3, [pc, #468]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a74      	ldr	r2, [pc, #464]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d013      	beq.n	8006378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fb fbb4 	bl	8001abc <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006358:	f7fb fbb0 	bl	8001abc <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	@ 0x64
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e29e      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800636a:	4b6a      	ldr	r3, [pc, #424]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0xc0>
 8006376:	e014      	b.n	80063a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fb fba0 	bl	8001abc <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006380:	f7fb fb9c 	bl	8001abc <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b64      	cmp	r3, #100	@ 0x64
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e28a      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006392:	4b60      	ldr	r3, [pc, #384]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCC_OscConfig+0xe8>
 800639e:	e000      	b.n	80063a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d075      	beq.n	800649a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ae:	4b59      	ldr	r3, [pc, #356]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 030c 	and.w	r3, r3, #12
 80063b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063b8:	4b56      	ldr	r3, [pc, #344]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b0c      	cmp	r3, #12
 80063c6:	d102      	bne.n	80063ce <HAL_RCC_OscConfig+0x136>
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d002      	beq.n	80063d4 <HAL_RCC_OscConfig+0x13c>
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d11f      	bne.n	8006414 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <HAL_RCC_OscConfig+0x154>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e25d      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ec:	4b49      	ldr	r3, [pc, #292]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	061b      	lsls	r3, r3, #24
 80063fa:	4946      	ldr	r1, [pc, #280]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006400:	4b45      	ldr	r3, [pc, #276]	@ (8006518 <HAL_RCC_OscConfig+0x280>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	f7fb fb0d 	bl	8001a24 <HAL_InitTick>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d043      	beq.n	8006498 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e249      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d023      	beq.n	8006464 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800641c:	4b3d      	ldr	r3, [pc, #244]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a3c      	ldr	r2, [pc, #240]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006428:	f7fb fb48 	bl	8001abc <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006430:	f7fb fb44 	bl	8001abc <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e232      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006442:	4b34      	ldr	r3, [pc, #208]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0f0      	beq.n	8006430 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644e:	4b31      	ldr	r3, [pc, #196]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	061b      	lsls	r3, r3, #24
 800645c:	492d      	ldr	r1, [pc, #180]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 800645e:	4313      	orrs	r3, r2
 8006460:	604b      	str	r3, [r1, #4]
 8006462:	e01a      	b.n	800649a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006464:	4b2b      	ldr	r3, [pc, #172]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a2a      	ldr	r2, [pc, #168]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 800646a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800646e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fb fb24 	bl	8001abc <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006478:	f7fb fb20 	bl	8001abc <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e20e      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800648a:	4b22      	ldr	r3, [pc, #136]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x1e0>
 8006496:	e000      	b.n	800649a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d041      	beq.n	800652a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d01c      	beq.n	80064e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ae:	4b19      	ldr	r3, [pc, #100]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80064b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064b4:	4a17      	ldr	r2, [pc, #92]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064be:	f7fb fafd 	bl	8001abc <HAL_GetTick>
 80064c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064c4:	e008      	b.n	80064d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064c6:	f7fb faf9 	bl	8001abc <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d901      	bls.n	80064d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e1e7      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80064da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0ef      	beq.n	80064c6 <HAL_RCC_OscConfig+0x22e>
 80064e6:	e020      	b.n	800652a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80064ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064ee:	4a09      	ldr	r2, [pc, #36]	@ (8006514 <HAL_RCC_OscConfig+0x27c>)
 80064f0:	f023 0301 	bic.w	r3, r3, #1
 80064f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f8:	f7fb fae0 	bl	8001abc <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064fe:	e00d      	b.n	800651c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006500:	f7fb fadc 	bl	8001abc <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d906      	bls.n	800651c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e1ca      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
 8006512:	bf00      	nop
 8006514:	40021000 	.word	0x40021000
 8006518:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800651c:	4b8c      	ldr	r3, [pc, #560]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 800651e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1ea      	bne.n	8006500 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 80a6 	beq.w	8006684 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006538:	2300      	movs	r3, #0
 800653a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800653c:	4b84      	ldr	r3, [pc, #528]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 800653e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_RCC_OscConfig+0x2b4>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <HAL_RCC_OscConfig+0x2b6>
 800654c:	2300      	movs	r3, #0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00d      	beq.n	800656e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006552:	4b7f      	ldr	r3, [pc, #508]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 8006554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006556:	4a7e      	ldr	r2, [pc, #504]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 8006558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800655c:	6593      	str	r3, [r2, #88]	@ 0x58
 800655e:	4b7c      	ldr	r3, [pc, #496]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 8006560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800656a:	2301      	movs	r3, #1
 800656c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800656e:	4b79      	ldr	r3, [pc, #484]	@ (8006754 <HAL_RCC_OscConfig+0x4bc>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006576:	2b00      	cmp	r3, #0
 8006578:	d118      	bne.n	80065ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800657a:	4b76      	ldr	r3, [pc, #472]	@ (8006754 <HAL_RCC_OscConfig+0x4bc>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a75      	ldr	r2, [pc, #468]	@ (8006754 <HAL_RCC_OscConfig+0x4bc>)
 8006580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006586:	f7fb fa99 	bl	8001abc <HAL_GetTick>
 800658a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800658c:	e008      	b.n	80065a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800658e:	f7fb fa95 	bl	8001abc <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e183      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006754 <HAL_RCC_OscConfig+0x4bc>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0f0      	beq.n	800658e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d108      	bne.n	80065c6 <HAL_RCC_OscConfig+0x32e>
 80065b4:	4b66      	ldr	r3, [pc, #408]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80065b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ba:	4a65      	ldr	r2, [pc, #404]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065c4:	e024      	b.n	8006610 <HAL_RCC_OscConfig+0x378>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d110      	bne.n	80065f0 <HAL_RCC_OscConfig+0x358>
 80065ce:	4b60      	ldr	r3, [pc, #384]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80065d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80065d6:	f043 0304 	orr.w	r3, r3, #4
 80065da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065de:	4b5c      	ldr	r3, [pc, #368]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e4:	4a5a      	ldr	r2, [pc, #360]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065ee:	e00f      	b.n	8006610 <HAL_RCC_OscConfig+0x378>
 80065f0:	4b57      	ldr	r3, [pc, #348]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80065f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f6:	4a56      	ldr	r2, [pc, #344]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80065f8:	f023 0301 	bic.w	r3, r3, #1
 80065fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006600:	4b53      	ldr	r3, [pc, #332]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 8006602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006606:	4a52      	ldr	r2, [pc, #328]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 8006608:	f023 0304 	bic.w	r3, r3, #4
 800660c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d016      	beq.n	8006646 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006618:	f7fb fa50 	bl	8001abc <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800661e:	e00a      	b.n	8006636 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006620:	f7fb fa4c 	bl	8001abc <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800662e:	4293      	cmp	r3, r2
 8006630:	d901      	bls.n	8006636 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e138      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006636:	4b46      	ldr	r3, [pc, #280]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 8006638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0ed      	beq.n	8006620 <HAL_RCC_OscConfig+0x388>
 8006644:	e015      	b.n	8006672 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006646:	f7fb fa39 	bl	8001abc <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800664c:	e00a      	b.n	8006664 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800664e:	f7fb fa35 	bl	8001abc <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800665c:	4293      	cmp	r3, r2
 800665e:	d901      	bls.n	8006664 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e121      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006664:	4b3a      	ldr	r3, [pc, #232]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1ed      	bne.n	800664e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006672:	7ffb      	ldrb	r3, [r7, #31]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d105      	bne.n	8006684 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006678:	4b35      	ldr	r3, [pc, #212]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 800667a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667c:	4a34      	ldr	r2, [pc, #208]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 800667e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006682:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d03c      	beq.n	800670a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01c      	beq.n	80066d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006698:	4b2d      	ldr	r3, [pc, #180]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 800669a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800669e:	4a2c      	ldr	r2, [pc, #176]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a8:	f7fb fa08 	bl	8001abc <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066b0:	f7fb fa04 	bl	8001abc <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e0f2      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066c2:	4b23      	ldr	r3, [pc, #140]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80066c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0ef      	beq.n	80066b0 <HAL_RCC_OscConfig+0x418>
 80066d0:	e01b      	b.n	800670a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80066d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e2:	f7fb f9eb 	bl	8001abc <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066ea:	f7fb f9e7 	bl	8001abc <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e0d5      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066fc:	4b14      	ldr	r3, [pc, #80]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 80066fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1ef      	bne.n	80066ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 80c9 	beq.w	80068a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006714:	4b0e      	ldr	r3, [pc, #56]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	2b0c      	cmp	r3, #12
 800671e:	f000 8083 	beq.w	8006828 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	2b02      	cmp	r3, #2
 8006728:	d15e      	bne.n	80067e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800672a:	4b09      	ldr	r3, [pc, #36]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a08      	ldr	r2, [pc, #32]	@ (8006750 <HAL_RCC_OscConfig+0x4b8>)
 8006730:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006736:	f7fb f9c1 	bl	8001abc <HAL_GetTick>
 800673a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800673c:	e00c      	b.n	8006758 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800673e:	f7fb f9bd 	bl	8001abc <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d905      	bls.n	8006758 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e0ab      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
 8006750:	40021000 	.word	0x40021000
 8006754:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006758:	4b55      	ldr	r3, [pc, #340]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1ec      	bne.n	800673e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006764:	4b52      	ldr	r3, [pc, #328]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	4b52      	ldr	r3, [pc, #328]	@ (80068b4 <HAL_RCC_OscConfig+0x61c>)
 800676a:	4013      	ands	r3, r2
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6a11      	ldr	r1, [r2, #32]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006774:	3a01      	subs	r2, #1
 8006776:	0112      	lsls	r2, r2, #4
 8006778:	4311      	orrs	r1, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800677e:	0212      	lsls	r2, r2, #8
 8006780:	4311      	orrs	r1, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006786:	0852      	lsrs	r2, r2, #1
 8006788:	3a01      	subs	r2, #1
 800678a:	0552      	lsls	r2, r2, #21
 800678c:	4311      	orrs	r1, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006792:	0852      	lsrs	r2, r2, #1
 8006794:	3a01      	subs	r2, #1
 8006796:	0652      	lsls	r2, r2, #25
 8006798:	4311      	orrs	r1, r2
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800679e:	06d2      	lsls	r2, r2, #27
 80067a0:	430a      	orrs	r2, r1
 80067a2:	4943      	ldr	r1, [pc, #268]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067a8:	4b41      	ldr	r3, [pc, #260]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a40      	ldr	r2, [pc, #256]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 80067ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067b4:	4b3e      	ldr	r3, [pc, #248]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	4a3d      	ldr	r2, [pc, #244]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 80067ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c0:	f7fb f97c 	bl	8001abc <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c8:	f7fb f978 	bl	8001abc <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e066      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067da:	4b35      	ldr	r3, [pc, #212]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0f0      	beq.n	80067c8 <HAL_RCC_OscConfig+0x530>
 80067e6:	e05e      	b.n	80068a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067e8:	4b31      	ldr	r3, [pc, #196]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a30      	ldr	r2, [pc, #192]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 80067ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f4:	f7fb f962 	bl	8001abc <HAL_GetTick>
 80067f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067fc:	f7fb f95e 	bl	8001abc <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e04c      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800680e:	4b28      	ldr	r3, [pc, #160]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f0      	bne.n	80067fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800681a:	4b25      	ldr	r3, [pc, #148]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	4924      	ldr	r1, [pc, #144]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 8006820:	4b25      	ldr	r3, [pc, #148]	@ (80068b8 <HAL_RCC_OscConfig+0x620>)
 8006822:	4013      	ands	r3, r2
 8006824:	60cb      	str	r3, [r1, #12]
 8006826:	e03e      	b.n	80068a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e039      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006834:	4b1e      	ldr	r3, [pc, #120]	@ (80068b0 <HAL_RCC_OscConfig+0x618>)
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f003 0203 	and.w	r2, r3, #3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	429a      	cmp	r2, r3
 8006846:	d12c      	bne.n	80068a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006852:	3b01      	subs	r3, #1
 8006854:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006856:	429a      	cmp	r2, r3
 8006858:	d123      	bne.n	80068a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006866:	429a      	cmp	r2, r3
 8006868:	d11b      	bne.n	80068a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006874:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006876:	429a      	cmp	r2, r3
 8006878:	d113      	bne.n	80068a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	3b01      	subs	r3, #1
 8006888:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800688a:	429a      	cmp	r2, r3
 800688c:	d109      	bne.n	80068a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006898:	085b      	lsrs	r3, r3, #1
 800689a:	3b01      	subs	r3, #1
 800689c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800689e:	429a      	cmp	r2, r3
 80068a0:	d001      	beq.n	80068a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3720      	adds	r7, #32
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40021000 	.word	0x40021000
 80068b4:	019f800c 	.word	0x019f800c
 80068b8:	feeefffc 	.word	0xfeeefffc

080068bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80068c6:	2300      	movs	r3, #0
 80068c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e11e      	b.n	8006b12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068d4:	4b91      	ldr	r3, [pc, #580]	@ (8006b1c <HAL_RCC_ClockConfig+0x260>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d910      	bls.n	8006904 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068e2:	4b8e      	ldr	r3, [pc, #568]	@ (8006b1c <HAL_RCC_ClockConfig+0x260>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f023 020f 	bic.w	r2, r3, #15
 80068ea:	498c      	ldr	r1, [pc, #560]	@ (8006b1c <HAL_RCC_ClockConfig+0x260>)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f2:	4b8a      	ldr	r3, [pc, #552]	@ (8006b1c <HAL_RCC_ClockConfig+0x260>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e106      	b.n	8006b12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d073      	beq.n	80069f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b03      	cmp	r3, #3
 8006916:	d129      	bne.n	800696c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006918:	4b81      	ldr	r3, [pc, #516]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e0f4      	b.n	8006b12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006928:	f000 f966 	bl	8006bf8 <RCC_GetSysClockFreqFromPLLSource>
 800692c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	4a7c      	ldr	r2, [pc, #496]	@ (8006b24 <HAL_RCC_ClockConfig+0x268>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d93f      	bls.n	80069b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006936:	4b7a      	ldr	r3, [pc, #488]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d009      	beq.n	8006956 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800694a:	2b00      	cmp	r3, #0
 800694c:	d033      	beq.n	80069b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006952:	2b00      	cmp	r3, #0
 8006954:	d12f      	bne.n	80069b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006956:	4b72      	ldr	r3, [pc, #456]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800695e:	4a70      	ldr	r2, [pc, #448]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006964:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006966:	2380      	movs	r3, #128	@ 0x80
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	e024      	b.n	80069b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b02      	cmp	r3, #2
 8006972:	d107      	bne.n	8006984 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006974:	4b6a      	ldr	r3, [pc, #424]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e0c6      	b.n	8006b12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006984:	4b66      	ldr	r3, [pc, #408]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e0be      	b.n	8006b12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006994:	f000 f8ce 	bl	8006b34 <HAL_RCC_GetSysClockFreq>
 8006998:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4a61      	ldr	r2, [pc, #388]	@ (8006b24 <HAL_RCC_ClockConfig+0x268>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d909      	bls.n	80069b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80069a2:	4b5f      	ldr	r3, [pc, #380]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069aa:	4a5d      	ldr	r2, [pc, #372]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 80069ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80069b2:	2380      	movs	r3, #128	@ 0x80
 80069b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069b6:	4b5a      	ldr	r3, [pc, #360]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f023 0203 	bic.w	r2, r3, #3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	4957      	ldr	r1, [pc, #348]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069c8:	f7fb f878 	bl	8001abc <HAL_GetTick>
 80069cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ce:	e00a      	b.n	80069e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069d0:	f7fb f874 	bl	8001abc <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069de:	4293      	cmp	r3, r2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e095      	b.n	8006b12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069e6:	4b4e      	ldr	r3, [pc, #312]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 020c 	and.w	r2, r3, #12
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d1eb      	bne.n	80069d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d023      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a10:	4b43      	ldr	r3, [pc, #268]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	4a42      	ldr	r2, [pc, #264]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006a16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006a28:	4b3d      	ldr	r3, [pc, #244]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a30:	4a3b      	ldr	r2, [pc, #236]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006a32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a38:	4b39      	ldr	r3, [pc, #228]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	4936      	ldr	r1, [pc, #216]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	608b      	str	r3, [r1, #8]
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2b80      	cmp	r3, #128	@ 0x80
 8006a50:	d105      	bne.n	8006a5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a52:	4b33      	ldr	r3, [pc, #204]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	4a32      	ldr	r2, [pc, #200]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006a58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006b1c <HAL_RCC_ClockConfig+0x260>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d21d      	bcs.n	8006aa8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b1c <HAL_RCC_ClockConfig+0x260>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f023 020f 	bic.w	r2, r3, #15
 8006a74:	4929      	ldr	r1, [pc, #164]	@ (8006b1c <HAL_RCC_ClockConfig+0x260>)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a7c:	f7fb f81e 	bl	8001abc <HAL_GetTick>
 8006a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a82:	e00a      	b.n	8006a9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a84:	f7fb f81a 	bl	8001abc <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e03b      	b.n	8006b12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a9a:	4b20      	ldr	r3, [pc, #128]	@ (8006b1c <HAL_RCC_ClockConfig+0x260>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d1ed      	bne.n	8006a84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	4917      	ldr	r1, [pc, #92]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ad2:	4b13      	ldr	r3, [pc, #76]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	490f      	ldr	r1, [pc, #60]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ae6:	f000 f825 	bl	8006b34 <HAL_RCC_GetSysClockFreq>
 8006aea:	4602      	mov	r2, r0
 8006aec:	4b0c      	ldr	r3, [pc, #48]	@ (8006b20 <HAL_RCC_ClockConfig+0x264>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	091b      	lsrs	r3, r3, #4
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	490c      	ldr	r1, [pc, #48]	@ (8006b28 <HAL_RCC_ClockConfig+0x26c>)
 8006af8:	5ccb      	ldrb	r3, [r1, r3]
 8006afa:	f003 031f 	and.w	r3, r3, #31
 8006afe:	fa22 f303 	lsr.w	r3, r2, r3
 8006b02:	4a0a      	ldr	r2, [pc, #40]	@ (8006b2c <HAL_RCC_ClockConfig+0x270>)
 8006b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006b06:	4b0a      	ldr	r3, [pc, #40]	@ (8006b30 <HAL_RCC_ClockConfig+0x274>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fa ff8a 	bl	8001a24 <HAL_InitTick>
 8006b10:	4603      	mov	r3, r0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40022000 	.word	0x40022000
 8006b20:	40021000 	.word	0x40021000
 8006b24:	04c4b400 	.word	0x04c4b400
 8006b28:	080073ec 	.word	0x080073ec
 8006b2c:	20000014 	.word	0x20000014
 8006b30:	20000018 	.word	0x20000018

08006b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8006bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 030c 	and.w	r3, r3, #12
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d102      	bne.n	8006b4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b46:	4b2a      	ldr	r3, [pc, #168]	@ (8006bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	e047      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b4c:	4b27      	ldr	r3, [pc, #156]	@ (8006bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f003 030c 	and.w	r3, r3, #12
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d102      	bne.n	8006b5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b58:	4b26      	ldr	r3, [pc, #152]	@ (8006bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	e03e      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006b5e:	4b23      	ldr	r3, [pc, #140]	@ (8006bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 030c 	and.w	r3, r3, #12
 8006b66:	2b0c      	cmp	r3, #12
 8006b68:	d136      	bne.n	8006bd8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b6a:	4b20      	ldr	r3, [pc, #128]	@ (8006bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b74:	4b1d      	ldr	r3, [pc, #116]	@ (8006bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	091b      	lsrs	r3, r3, #4
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	3301      	adds	r3, #1
 8006b80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d10c      	bne.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b88:	4a1a      	ldr	r2, [pc, #104]	@ (8006bf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b90:	4a16      	ldr	r2, [pc, #88]	@ (8006bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b92:	68d2      	ldr	r2, [r2, #12]
 8006b94:	0a12      	lsrs	r2, r2, #8
 8006b96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b9a:	fb02 f303 	mul.w	r3, r2, r3
 8006b9e:	617b      	str	r3, [r7, #20]
      break;
 8006ba0:	e00c      	b.n	8006bbc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ba2:	4a13      	ldr	r2, [pc, #76]	@ (8006bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006baa:	4a10      	ldr	r2, [pc, #64]	@ (8006bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bac:	68d2      	ldr	r2, [r2, #12]
 8006bae:	0a12      	lsrs	r2, r2, #8
 8006bb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bb4:	fb02 f303 	mul.w	r3, r2, r3
 8006bb8:	617b      	str	r3, [r7, #20]
      break;
 8006bba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	0e5b      	lsrs	r3, r3, #25
 8006bc2:	f003 0303 	and.w	r3, r3, #3
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	e001      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006bdc:	693b      	ldr	r3, [r7, #16]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	00f42400 	.word	0x00f42400
 8006bf4:	016e3600 	.word	0x016e3600

08006bf8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8006c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c08:	4b1b      	ldr	r3, [pc, #108]	@ (8006c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	091b      	lsrs	r3, r3, #4
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	3301      	adds	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d10c      	bne.n	8006c36 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c1c:	4a17      	ldr	r2, [pc, #92]	@ (8006c7c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c24:	4a14      	ldr	r2, [pc, #80]	@ (8006c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c26:	68d2      	ldr	r2, [r2, #12]
 8006c28:	0a12      	lsrs	r2, r2, #8
 8006c2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c2e:	fb02 f303 	mul.w	r3, r2, r3
 8006c32:	617b      	str	r3, [r7, #20]
    break;
 8006c34:	e00c      	b.n	8006c50 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c36:	4a12      	ldr	r2, [pc, #72]	@ (8006c80 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8006c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c40:	68d2      	ldr	r2, [r2, #12]
 8006c42:	0a12      	lsrs	r2, r2, #8
 8006c44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c48:	fb02 f303 	mul.w	r3, r2, r3
 8006c4c:	617b      	str	r3, [r7, #20]
    break;
 8006c4e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c50:	4b09      	ldr	r3, [pc, #36]	@ (8006c78 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	0e5b      	lsrs	r3, r3, #25
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c68:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006c6a:	687b      	ldr	r3, [r7, #4]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	016e3600 	.word	0x016e3600
 8006c80:	00f42400 	.word	0x00f42400

08006c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c90:	2300      	movs	r3, #0
 8006c92:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 8098 	beq.w	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ca6:	4b43      	ldr	r3, [pc, #268]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10d      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cb2:	4b40      	ldr	r3, [pc, #256]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb6:	4a3f      	ldr	r2, [pc, #252]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cc6:	60bb      	str	r3, [r7, #8]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cce:	4b3a      	ldr	r3, [pc, #232]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a39      	ldr	r2, [pc, #228]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cda:	f7fa feef 	bl	8001abc <HAL_GetTick>
 8006cde:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ce0:	e009      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ce2:	f7fa feeb 	bl	8001abc <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d902      	bls.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	74fb      	strb	r3, [r7, #19]
        break;
 8006cf4:	e005      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cf6:	4b30      	ldr	r3, [pc, #192]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0ef      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006d02:	7cfb      	ldrb	r3, [r7, #19]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d159      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d08:	4b2a      	ldr	r3, [pc, #168]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d01e      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d019      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d24:	4b23      	ldr	r3, [pc, #140]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d30:	4b20      	ldr	r3, [pc, #128]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d36:	4a1f      	ldr	r2, [pc, #124]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d40:	4b1c      	ldr	r3, [pc, #112]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d46:	4a1b      	ldr	r2, [pc, #108]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d50:	4a18      	ldr	r2, [pc, #96]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d016      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d62:	f7fa feab 	bl	8001abc <HAL_GetTick>
 8006d66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d68:	e00b      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d6a:	f7fa fea7 	bl	8001abc <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d902      	bls.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	74fb      	strb	r3, [r7, #19]
            break;
 8006d80:	e006      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d82:	4b0c      	ldr	r3, [pc, #48]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0ec      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006d90:	7cfb      	ldrb	r3, [r7, #19]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d96:	4b07      	ldr	r3, [pc, #28]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da4:	4903      	ldr	r1, [pc, #12]	@ (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006dac:	e008      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dae:	7cfb      	ldrb	r3, [r7, #19]
 8006db0:	74bb      	strb	r3, [r7, #18]
 8006db2:	e005      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006db4:	40021000 	.word	0x40021000
 8006db8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dbc:	7cfb      	ldrb	r3, [r7, #19]
 8006dbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dc0:	7c7b      	ldrb	r3, [r7, #17]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d105      	bne.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dc6:	4ba7      	ldr	r3, [pc, #668]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dca:	4aa6      	ldr	r2, [pc, #664]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dd0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dde:	4ba1      	ldr	r3, [pc, #644]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de4:	f023 0203 	bic.w	r2, r3, #3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	499d      	ldr	r1, [pc, #628]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e00:	4b98      	ldr	r3, [pc, #608]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e06:	f023 020c 	bic.w	r2, r3, #12
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	4995      	ldr	r1, [pc, #596]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e22:	4b90      	ldr	r3, [pc, #576]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	498c      	ldr	r1, [pc, #560]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e44:	4b87      	ldr	r3, [pc, #540]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	4984      	ldr	r1, [pc, #528]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e66:	4b7f      	ldr	r3, [pc, #508]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	497b      	ldr	r1, [pc, #492]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e88:	4b76      	ldr	r3, [pc, #472]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e8e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	4973      	ldr	r1, [pc, #460]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	496a      	ldr	r1, [pc, #424]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ecc:	4b65      	ldr	r3, [pc, #404]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	4962      	ldr	r1, [pc, #392]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006eee:	4b5d      	ldr	r3, [pc, #372]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efc:	4959      	ldr	r1, [pc, #356]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f10:	4b54      	ldr	r3, [pc, #336]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f16:	f023 0203 	bic.w	r2, r3, #3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1e:	4951      	ldr	r1, [pc, #324]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f32:	4b4c      	ldr	r3, [pc, #304]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f40:	4948      	ldr	r1, [pc, #288]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d015      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f54:	4b43      	ldr	r3, [pc, #268]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f62:	4940      	ldr	r1, [pc, #256]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f72:	d105      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f74:	4b3b      	ldr	r3, [pc, #236]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	4a3a      	ldr	r2, [pc, #232]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f7e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d015      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f8c:	4b35      	ldr	r3, [pc, #212]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9a:	4932      	ldr	r1, [pc, #200]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006faa:	d105      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fac:	4b2d      	ldr	r3, [pc, #180]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fb6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d015      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fc4:	4b27      	ldr	r3, [pc, #156]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd2:	4924      	ldr	r1, [pc, #144]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fe2:	d105      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d015      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ffc:	4b19      	ldr	r3, [pc, #100]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007002:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700a:	4916      	ldr	r1, [pc, #88]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700c:	4313      	orrs	r3, r2
 800700e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007016:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800701a:	d105      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800701c:	4b11      	ldr	r3, [pc, #68]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	4a10      	ldr	r2, [pc, #64]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007026:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d019      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007034:	4b0b      	ldr	r3, [pc, #44]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800703a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007042:	4908      	ldr	r1, [pc, #32]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007044:	4313      	orrs	r3, r2
 8007046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007052:	d109      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007054:	4b03      	ldr	r3, [pc, #12]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	4a02      	ldr	r2, [pc, #8]	@ (8007064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800705a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800705e:	60d3      	str	r3, [r2, #12]
 8007060:	e002      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007062:	bf00      	nop
 8007064:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d015      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007074:	4b29      	ldr	r3, [pc, #164]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007082:	4926      	ldr	r1, [pc, #152]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007092:	d105      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007094:	4b21      	ldr	r3, [pc, #132]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	4a20      	ldr	r2, [pc, #128]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800709a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800709e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d015      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80070ac:	4b1b      	ldr	r3, [pc, #108]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ba:	4918      	ldr	r1, [pc, #96]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ca:	d105      	bne.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070cc:	4b13      	ldr	r3, [pc, #76]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	4a12      	ldr	r2, [pc, #72]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d015      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070e4:	4b0d      	ldr	r3, [pc, #52]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070f2:	490a      	ldr	r1, [pc, #40]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007102:	d105      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007104:	4b05      	ldr	r3, [pc, #20]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	4a04      	ldr	r2, [pc, #16]	@ (800711c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800710a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800710e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007110:	7cbb      	ldrb	r3, [r7, #18]
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40021000 	.word	0x40021000

08007120 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d070      	beq.n	8007214 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d106      	bne.n	800714c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fa fb8a 	bl	8001860 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f003 0310 	and.w	r3, r3, #16
 800715e:	2b10      	cmp	r3, #16
 8007160:	d04f      	beq.n	8007202 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	22ca      	movs	r2, #202	@ 0xca
 8007168:	625a      	str	r2, [r3, #36]	@ 0x24
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2253      	movs	r2, #83	@ 0x53
 8007170:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f878 	bl	8007268 <RTC_EnterInitMode>
 8007178:	4603      	mov	r3, r0
 800717a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d126      	bne.n	80071d0 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6812      	ldr	r2, [r2, #0]
 800718c:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8007190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007194:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6999      	ldr	r1, [r3, #24]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	431a      	orrs	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68d9      	ldr	r1, [r3, #12]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	041a      	lsls	r2, r3, #16
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f884 	bl	80072d4 <RTC_ExitInitMode>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d110      	bne.n	80071f8 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1a      	ldr	r2, [r3, #32]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	22ff      	movs	r2, #255	@ 0xff
 80071fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8007200:	e001      	b.n	8007206 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d103      	bne.n	8007214 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a0d      	ldr	r2, [pc, #52]	@ (8007264 <HAL_RTC_WaitForSynchro+0x44>)
 800722e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007230:	f7fa fc44 	bl	8001abc <HAL_GetTick>
 8007234:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8007236:	e009      	b.n	800724c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007238:	f7fa fc40 	bl	8001abc <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007246:	d901      	bls.n	800724c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e007      	b.n	800725c <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0ee      	beq.n	8007238 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	0001005f 	.word	0x0001005f

08007268 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	d123      	bne.n	80072ca <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007290:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007292:	f7fa fc13 	bl	8001abc <HAL_GetTick>
 8007296:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007298:	e00d      	b.n	80072b6 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800729a:	f7fa fc0f 	bl	8001abc <HAL_GetTick>
 800729e:	4602      	mov	r2, r0
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072a8:	d905      	bls.n	80072b6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2203      	movs	r2, #3
 80072b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d102      	bne.n	80072ca <RTC_EnterInitMode+0x62>
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d1e7      	bne.n	800729a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072ee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10c      	bne.n	8007318 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff ff8e 	bl	8007220 <HAL_RTC_WaitForSynchro>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d022      	beq.n	8007350 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2203      	movs	r2, #3
 800730e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	73fb      	strb	r3, [r7, #15]
 8007316:	e01b      	b.n	8007350 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0220 	bic.w	r2, r2, #32
 8007326:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff ff79 	bl	8007220 <HAL_RTC_WaitForSynchro>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d005      	beq.n	8007340 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2203      	movs	r2, #3
 8007338:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0220 	orr.w	r2, r2, #32
 800734e:	619a      	str	r2, [r3, #24]
  }

  return status;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <memset>:
 800735a:	4402      	add	r2, r0
 800735c:	4603      	mov	r3, r0
 800735e:	4293      	cmp	r3, r2
 8007360:	d100      	bne.n	8007364 <memset+0xa>
 8007362:	4770      	bx	lr
 8007364:	f803 1b01 	strb.w	r1, [r3], #1
 8007368:	e7f9      	b.n	800735e <memset+0x4>
	...

0800736c <__libc_init_array>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	4d0d      	ldr	r5, [pc, #52]	@ (80073a4 <__libc_init_array+0x38>)
 8007370:	4c0d      	ldr	r4, [pc, #52]	@ (80073a8 <__libc_init_array+0x3c>)
 8007372:	1b64      	subs	r4, r4, r5
 8007374:	10a4      	asrs	r4, r4, #2
 8007376:	2600      	movs	r6, #0
 8007378:	42a6      	cmp	r6, r4
 800737a:	d109      	bne.n	8007390 <__libc_init_array+0x24>
 800737c:	4d0b      	ldr	r5, [pc, #44]	@ (80073ac <__libc_init_array+0x40>)
 800737e:	4c0c      	ldr	r4, [pc, #48]	@ (80073b0 <__libc_init_array+0x44>)
 8007380:	f000 f818 	bl	80073b4 <_init>
 8007384:	1b64      	subs	r4, r4, r5
 8007386:	10a4      	asrs	r4, r4, #2
 8007388:	2600      	movs	r6, #0
 800738a:	42a6      	cmp	r6, r4
 800738c:	d105      	bne.n	800739a <__libc_init_array+0x2e>
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	f855 3b04 	ldr.w	r3, [r5], #4
 8007394:	4798      	blx	r3
 8007396:	3601      	adds	r6, #1
 8007398:	e7ee      	b.n	8007378 <__libc_init_array+0xc>
 800739a:	f855 3b04 	ldr.w	r3, [r5], #4
 800739e:	4798      	blx	r3
 80073a0:	3601      	adds	r6, #1
 80073a2:	e7f2      	b.n	800738a <__libc_init_array+0x1e>
 80073a4:	080073fc 	.word	0x080073fc
 80073a8:	080073fc 	.word	0x080073fc
 80073ac:	080073fc 	.word	0x080073fc
 80073b0:	08007400 	.word	0x08007400

080073b4 <_init>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	bf00      	nop
 80073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ba:	bc08      	pop	{r3}
 80073bc:	469e      	mov	lr, r3
 80073be:	4770      	bx	lr

080073c0 <_fini>:
 80073c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c2:	bf00      	nop
 80073c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c6:	bc08      	pop	{r3}
 80073c8:	469e      	mov	lr, r3
 80073ca:	4770      	bx	lr
